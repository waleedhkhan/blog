var l=(e,n)=>{let r=o(e.path);if(e.code==="invalid_union"){let d=new Map;for(let t of e.unionErrors.flatMap(i=>i.errors))if(t.code==="invalid_type"||t.code==="invalid_literal"){let i=o(t.path);d.has(i)?d.get(i).expected.push(t.expected):d.set(i,{code:t.code,received:t.received,expected:[t.expected]})}return{message:[c(r,d.size?"Did not match union:":"Did not match union.")].concat([...d.entries()].filter(([,t])=>t.expected.length===e.unionErrors.length).map(([t,i])=>t===r?`> ${s(i)}`:`> ${c(t,s(i))}`)).join(`
`)}}return e.code==="invalid_literal"||e.code==="invalid_type"?{message:c(r,s({code:e.code,received:e.received,expected:[e.expected]}))}:e.message?{message:c(r,e.message)}:{message:c(r,n.defaultError)}},s=e=>{if(e.received==="undefined")return"Required";let n=new Set(e.expected);switch(e.code){case"invalid_type":return`Expected type \`${a(n)}\`, received ${JSON.stringify(e.received)}`;case"invalid_literal":return`Expected \`${a(n)}\`, received ${JSON.stringify(e.received)}`}},c=(e,n)=>e.length?`**${e}**: ${n}`:n,a=e=>[...e].map((n,r)=>r===0?JSON.stringify(n):` | ${JSON.stringify(n)}`).join(""),o=e=>e.join(".");export{l as errorMap};
//# sourceMappingURL=error-map.js.map