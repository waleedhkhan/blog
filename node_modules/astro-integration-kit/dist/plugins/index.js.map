{"version":3,"sources":["../../src/core/define-plugin.ts","../../src/core/define-utility.ts","../../src/utilities/has-vite-plugin.ts","../../src/plugins/has-vite-plugin.ts"],"sourcesContent":["import type { Plugin, PluginHooksConstraint } from \"./types.js\";\n\n/**\n * Allows defining a type-safe plugin that can be used in {defineIntegration}.\n *\n * @param {object} plugin\n * @param {string} plugin.name - The name of the plugin, as you want it to be called from the hook\n * @param {string} plugin.hook - The name of the hook where this plugin should be available\n * @param {Function} plugin.implementation - The actual function definition. Refer to docs for usage\n *\n * @see https://astro-integration-kit.netlify.app/utilities/define-plugin/\n *\n * ```ts\n * import { definePlugin } from \"../core/define-plugin.js\";\n * import { addVitePlugin } from \"../utilities/add-vite-plugin.js\";\n * import type { Plugin as VitePlugin } from \"vite\"\n *\n * export const addVitePluginPlugin = definePlugin({\n * \t\tname: \"addVitePlugin\",\n * \t\thook: \"astro:config:setup\",\n * \t\timplementation: ({ updateConfig }) => (plugin: VitePlugin) => addVitePlugin({ plugin, updateConfig }),\n * });\n * ```\n */\nexport const definePlugin = <\n\tTName extends string,\n\tTHooks extends PluginHooksConstraint,\n>(\n\tplugin: Plugin<TName, THooks>,\n) => plugin;\n","import type { HookParameters, Hooks } from \"./types.js\";\n\n/**\n * Allows defining a type-safe function requiring all the params of a given hook.\n * It uses currying to make TypeScript happy.\n *\n * @param {string} _hook\n *\n * @see https://astro-integration-kit.netlify.app/utilities/define-utility/\n *\n * @example\n * ```ts\n * const test = defineUtility(\"astro:config:setup\")((params, foo: boolean) => {\n *  return \"bar\";\n * });\n * ```\n */\nexport const defineUtility =\n\t<THook extends keyof Hooks>(_hook: THook) =>\n\t/**\n\t * The function itself\n\t * @param {Function} fn;\n\t */\n\t<TFn extends (params: HookParameters<THook>, ...args: Array<any>) => any>(\n\t\tfn: TFn,\n\t) =>\n\t\tfn;\n","import type { AstroConfig } from \"astro\";\nimport type { PluginOption } from \"vite\";\nimport { defineUtility } from \"../core/define-utility.js\";\n\nfunction getPluginNames(plugins: AstroConfig[\"vite\"][\"plugins\"]) {\n\tconst names: string[] = [];\n\n\tif (plugins) {\n\t\tfor (const plugin of plugins) {\n\t\t\tif (!plugin) continue;\n\n\t\t\tif (Array.isArray(plugin)) {\n\t\t\t\tnames.push(...getPluginNames(plugin));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (plugin instanceof Promise) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnames.push(plugin.name);\n\t\t}\n\t}\n\n\treturn names;\n}\n\n/**\n * Checks for the existence of a Vite plugin inside the Astro config.\n *\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">} params\n * @param {Params} options\n * @param {string | import(\"vite\").PluginOption} options.plugin\n *\n * @see https://astro-integration-kit.netlify.app/utilities/has-vite-plugin/\n *\n * @example\n * ```ts\n * hasVitePlugin(params, {\n * \t\tplugin: \"vite-plugin-my-integration\",\n * })\n * ```\n */\nexport const hasVitePlugin = defineUtility(\"astro:config:setup\")(\n\t(\n\t\t{ config },\n\t\t{\n\t\t\tplugin,\n\t\t}: {\n\t\t\tplugin: string | PluginOption;\n\t\t},\n\t): boolean => {\n\t\tif (!plugin || plugin instanceof Promise) return false;\n\n\t\tconst currentPlugins = new Set(getPluginNames(config?.vite?.plugins));\n\n\t\tconst plugins = new Set<string>();\n\n\t\tif (typeof plugin === \"string\") {\n\t\t\tplugins.add(plugin);\n\t\t}\n\n\t\tif (typeof plugin === \"object\") {\n\t\t\tif (Array.isArray(plugin)) {\n\t\t\t\tconst names = new Set(\n\t\t\t\t\tgetPluginNames(plugin as NonNullable<AstroConfig[\"vite\"][\"plugins\"]>),\n\t\t\t\t);\n\t\t\t\tfor (const name of names) plugins.add(name);\n\t\t\t} else {\n\t\t\t\tplugins.add(plugin.name);\n\t\t\t}\n\t\t}\n\n\t\treturn [...plugins].some((name) => currentPlugins.has(name));\n\t},\n);\n","import type { AstroConfig } from \"astro\";\nimport type { Plugin, PluginOption } from \"vite\";\nimport { definePlugin } from \"../core/define-plugin.js\";\nimport { hasVitePlugin } from \"../utilities/has-vite-plugin.js\";\n\nfunction getPlugins(\n\tstore: Set<Plugin<any>>,\n\tplugins: AstroConfig[\"vite\"][\"plugins\"],\n) {\n\tif (plugins) {\n\t\tfor (const plugin of plugins) {\n\t\t\tif (!plugin) continue;\n\n\t\t\tif (Array.isArray(plugin)) {\n\t\t\t\tgetPlugins(store, plugin);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (plugin instanceof Promise) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tstore.add(plugin);\n\t\t}\n\t}\n\treturn store;\n}\n\nexport const hasVitePluginPlugin = definePlugin({\n\tname: \"hasVitePlugin\",\n\tsetup() {\n\t\treturn {\n\t\t\t\"astro:config:setup\": (params) => {\n\t\t\t\tconst currentPlugins = getPlugins(\n\t\t\t\t\tnew Set(),\n\t\t\t\t\tparams.config.vite?.plugins,\n\t\t\t\t);\n\n\t\t\t\tconst { updateConfig, config } = params;\n\n\t\t\t\tparams.updateConfig = (newConfig) => {\n\t\t\t\t\tconfig.vite.plugins = Array.from(\n\t\t\t\t\t\tgetPlugins(currentPlugins, newConfig.vite?.plugins),\n\t\t\t\t\t);\n\t\t\t\t\treturn updateConfig(newConfig);\n\t\t\t\t};\n\n\t\t\t\treturn {\n\t\t\t\t\thasVitePlugin: (plugin: string | PluginOption) =>\n\t\t\t\t\t\thasVitePlugin(params, {\n\t\t\t\t\t\t\tplugin,\n\t\t\t\t\t\t}),\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t},\n});\n"],"mappings":"AAwBO,IAAMA,EAIZC,GACIA,ECZE,IAAMC,EACgBC,GAM3BC,GAEAA,ECtBF,SAASC,EAAeC,EAAyC,CAChE,IAAMC,EAAkB,CAAC,EAEzB,GAAID,GACH,QAAWE,KAAUF,EACpB,GAAKE,EAEL,IAAI,MAAM,QAAQA,CAAM,EAAG,CAC1BD,EAAM,KAAK,GAAGF,EAAeG,CAAM,CAAC,EACpC,QACD,CAEIA,aAAkB,SAItBD,EAAM,KAAKC,EAAO,IAAI,GAIxB,OAAOD,CACR,CAkBO,IAAME,EAAgBC,EAAc,oBAAoB,EAC9D,CACC,CAAE,OAAAC,CAAO,EACT,CACC,OAAAH,CACD,IAGa,CACb,GAAI,CAACA,GAAUA,aAAkB,QAAS,MAAO,GAEjD,IAAMI,EAAiB,IAAI,IAAIP,EAAeM,GAAQ,MAAM,OAAO,CAAC,EAE9DL,EAAU,IAAI,IAMpB,GAJI,OAAOE,GAAW,UACrBF,EAAQ,IAAIE,CAAM,EAGf,OAAOA,GAAW,SACrB,GAAI,MAAM,QAAQA,CAAM,EAAG,CAC1B,IAAMD,EAAQ,IAAI,IACjBF,EAAeG,CAAqD,CACrE,EACA,QAAWK,KAAQN,EAAOD,EAAQ,IAAIO,CAAI,CAC3C,MACCP,EAAQ,IAAIE,EAAO,IAAI,EAIzB,MAAO,CAAC,GAAGF,CAAO,EAAE,KAAMO,GAASD,EAAe,IAAIC,CAAI,CAAC,CAC5D,CACD,ECtEA,SAASC,EACRC,EACAC,EACC,CACD,GAAIA,GACH,QAAWC,KAAUD,EACpB,GAAKC,EAEL,IAAI,MAAM,QAAQA,CAAM,EAAG,CAC1BH,EAAWC,EAAOE,CAAM,EACxB,QACD,CAEIA,aAAkB,SAItBF,EAAM,IAAIE,CAAM,GAGlB,OAAOF,CACR,CAEO,IAAMG,EAAsBC,EAAa,CAC/C,KAAM,gBACN,OAAQ,CACP,MAAO,CACN,qBAAuBC,GAAW,CACjC,IAAMC,EAAiBP,EACtB,IAAI,IACJM,EAAO,OAAO,MAAM,OACrB,EAEM,CAAE,aAAAE,EAAc,OAAAC,CAAO,EAAIH,EAEjC,OAAAA,EAAO,aAAgBI,IACtBD,EAAO,KAAK,QAAU,MAAM,KAC3BT,EAAWO,EAAgBG,EAAU,MAAM,OAAO,CACnD,EACOF,EAAaE,CAAS,GAGvB,CACN,cAAgBP,GACfQ,EAAcL,EAAQ,CACrB,OAAAH,CACD,CAAC,CACH,CACD,CACD,CACD,CACD,CAAC","names":["definePlugin","plugin","defineUtility","_hook","fn","getPluginNames","plugins","names","plugin","hasVitePlugin","defineUtility","config","currentPlugins","name","getPlugins","store","plugins","plugin","hasVitePluginPlugin","definePlugin","params","currentPlugins","updateConfig","config","newConfig","hasVitePlugin"]}