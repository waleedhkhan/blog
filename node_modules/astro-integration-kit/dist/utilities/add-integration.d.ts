import { D as DeepPartial } from '../type-utils.d-CSknV27i.js';
import * as astro from 'astro';
import { AstroIntegration } from 'astro';

type AddIntegrationParams = {
    integration: AstroIntegration;
    ensureUnique?: boolean | undefined;
};
/**
 * Easily add an integration from within an integration.
 *
 * @param {import("astro").HookParameters<"astro:config:setup">} params
 * @param {object} options
 * @param {import("astro").AstroIntegration} options.integration
 * @param {boolean} options.ensureUnique
 *
 * @example
 * ```ts
 * import Vue from "@astrojs/vue";
 *
 * addIntegration(params, {
 * 	integration: Vue(),
 * 	ensureUnique: true,
 * })
 * ```
 *
 * @see https://astro-integration-kit.netlify.app/utilities/add-integration/
 */
declare const addIntegration: (params: {
    config: astro.AstroConfig;
    command: "dev" | "build" | "preview";
    isRestart: boolean;
    updateConfig: (newConfig: DeepPartial<astro.AstroConfig>) => astro.AstroConfig;
    addRenderer: (renderer: astro.AstroRenderer) => void;
    addWatchFile: (path: string | URL) => void;
    injectScript: (stage: astro.InjectedScriptStage, content: string) => void;
    injectRoute: (injectRoute: astro.InjectedRoute) => void;
    addClientDirective: (directive: astro.ClientDirectiveConfig) => void;
    addDevOverlayPlugin: (entrypoint: string) => void;
    addDevToolbarApp: (entrypoint: string) => void;
    addMiddleware: (mid: astro.AstroIntegrationMiddleware) => void;
    logger: astro.AstroIntegrationLogger;
}, { integration, ensureUnique }: AddIntegrationParams) => void;

export { type AddIntegrationParams, addIntegration };
