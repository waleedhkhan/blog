import { D as DeepPartial } from '../type-utils.d-CSknV27i.js';
import * as astro from 'astro';
import { AstroIntegrationLogger } from 'astro';

/**
 * Allows to inject .d.ts file in users project. It will create a file inside `.astro`
 * and reference it from `src/env.d.ts`.
 *
 * @param {import("astro").HookParameters<"astro:config:setup">} params
 * @param {object} options
 * @param {string} options.name - The name of the .d.ts file. Eg `test` will generate `.astro/test.d.ts`
 * @param {string} options.content
 *
 * @example
 * ```ts
 * addDts(params, {
 * 		name: "my-integration",
 * 	 	content: `declare module "virtual:my-integration" {}`,
 * })
 * ```
 *
 * @see https://astro-integration-kit.netlify.app/utilities/add-dts/
 */
declare const addDts: ({ config: { root, srcDir }, logger }: {
    config: astro.AstroConfig;
    command: "dev" | "build" | "preview";
    isRestart: boolean;
    updateConfig: (newConfig: DeepPartial<astro.AstroConfig>) => astro.AstroConfig;
    addRenderer: (renderer: astro.AstroRenderer) => void;
    addWatchFile: (path: string | URL) => void;
    injectScript: (stage: astro.InjectedScriptStage, content: string) => void;
    injectRoute: (injectRoute: astro.InjectedRoute) => void;
    addClientDirective: (directive: astro.ClientDirectiveConfig) => void;
    addDevOverlayPlugin: (entrypoint: string) => void;
    addDevToolbarApp: (entrypoint: string) => void;
    addMiddleware: (mid: astro.AstroIntegrationMiddleware) => void;
    logger: AstroIntegrationLogger;
}, { name, content, }: {
    name: string;
    content: string;
}) => void;

export { addDts };
