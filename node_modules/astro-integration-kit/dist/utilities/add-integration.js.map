{"version":3,"sources":["../../src/utilities/add-integration.ts","../../src/core/define-utility.ts","../../src/utilities/has-integration.ts"],"sourcesContent":["import { type AstroIntegration } from \"astro\";\nimport { defineUtility } from \"../core/define-utility.js\";\nimport { hasIntegration } from \"./has-integration.js\";\n\nexport type AddIntegrationParams = {\n\tintegration: AstroIntegration;\n\tensureUnique?: boolean | undefined;\n};\n\n/**\n * Easily add an integration from within an integration.\n *\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">} params\n * @param {object} options\n * @param {import(\"astro\").AstroIntegration} options.integration\n * @param {boolean} options.ensureUnique\n *\n * @example\n * ```ts\n * import Vue from \"@astrojs/vue\";\n *\n * addIntegration(params, {\n * \tintegration: Vue(),\n * \tensureUnique: true,\n * })\n * ```\n *\n * @see https://astro-integration-kit.netlify.app/utilities/add-integration/\n */\nexport const addIntegration = defineUtility(\"astro:config:setup\")(\n\t(params, { integration, ensureUnique }: AddIntegrationParams) => {\n\t\tconst { logger, updateConfig } = params;\n\t\tif (\n\t\t\tensureUnique &&\n\t\t\thasIntegration(params, {\n\t\t\t\tname: integration.name,\n\t\t\t})\n\t\t) {\n\t\t\tlogger.warn(\n\t\t\t\t`Integration \"${integration.name}\" has already been added by the user or another integration. Skipping.`,\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tupdateConfig({\n\t\t\tintegrations: [integration],\n\t\t});\n\t},\n);\n","import type { HookParameters, Hooks } from \"./types.js\";\n\n/**\n * Allows defining a type-safe function requiring all the params of a given hook.\n * It uses currying to make TypeScript happy.\n *\n * @param {string} _hook\n *\n * @see https://astro-integration-kit.netlify.app/utilities/define-utility/\n *\n * @example\n * ```ts\n * const test = defineUtility(\"astro:config:setup\")((params, foo: boolean) => {\n *  return \"bar\";\n * });\n * ```\n */\nexport const defineUtility =\n\t<THook extends keyof Hooks>(_hook: THook) =>\n\t/**\n\t * The function itself\n\t * @param {Function} fn;\n\t */\n\t<TFn extends (params: HookParameters<THook>, ...args: Array<any>) => any>(\n\t\tfn: TFn,\n\t) =>\n\t\tfn;\n","import { AstroError } from \"astro/errors\";\nimport { defineUtility } from \"../core/define-utility.js\";\n\ntype HasIntegrationParams = (\n\t| { position?: undefined; relativeTo?: string }\n\t| { position: \"before\" | \"after\"; relativeTo: string }\n) & {\n\tname: string;\n};\n\n/**\n * Checks whether an integration is already installed.\n *\n * If `before` is given, returns true only if the integration is installed before the named|provided integration.\n * If `after` is given, returns true only if the integration is installed after the named|provided integration.\n *\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">} params\n * @param {object} options\n * @param {string} options.name - Integration to look up.\n * @param {undefined | \"before\" | \"after\"} options.position - Position in relation to another integration to check.\n * @param {undefined | string} options.relativeTo - Other integration to check for relative poisition.\n *\n * @returns {boolean}\n *\n * @throws {AstroError} When `params.position` is defined but `params.relativeTo` isn't.\n *\n * @see https://astro-integration-kit.netlify.app/utilities/has-integration/\n *\n * @example\n * ```ts\n * hasIntegration(params, {\n * \t\tname: \"@astrojs/tailwind\",\n * })\n * ```\n */\nexport const hasIntegration = defineUtility(\"astro:config:setup\")(\n\t(\n\t\t{ config },\n\t\t{ name, position, relativeTo }: HasIntegrationParams,\n\t): boolean => {\n\t\tconst integrationPosition = config.integrations.findIndex(\n\t\t\t(integration) => integration.name === name,\n\t\t);\n\n\t\t// Integration is not installed\n\t\tif (integrationPosition === -1) return false;\n\n\t\t// Not a relative check, the integration is present.\n\t\tif (position === undefined) return true;\n\n\t\tif (relativeTo === undefined)\n\t\t\tthrow new AstroError(\n\t\t\t\t\"Cannot perform a relative integration check without a relative reference.\",\n\t\t\t\t\"Pass `relativeTo` on your call to `hasIntegration` or remove the `position` option.\",\n\t\t\t);\n\n\t\tconst otherPosition = config.integrations.findIndex(\n\t\t\t(integration) => integration.name === relativeTo,\n\t\t);\n\n\t\tif (otherPosition === -1)\n\t\t\tthrow new AstroError(\n\t\t\t\t\"Cannot check relative position against an absent integration.\",\n\t\t\t);\n\n\t\treturn position === \"before\"\n\t\t\t? integrationPosition < otherPosition\n\t\t\t: integrationPosition > otherPosition;\n\t},\n);\n"],"mappings":"AAAA,MAAsC,QCiB/B,IAAMA,EACgBC,GAM3BC,GAEAA,EC1BF,OAAS,cAAAC,MAAkB,eAmCpB,IAAMC,EAAiBC,EAAc,oBAAoB,EAC/D,CACC,CAAE,OAAAC,CAAO,EACT,CAAE,KAAAC,EAAM,SAAAC,EAAU,WAAAC,CAAW,IAChB,CACb,IAAMC,EAAsBJ,EAAO,aAAa,UAC9CK,GAAgBA,EAAY,OAASJ,CACvC,EAGA,GAAIG,IAAwB,GAAI,MAAO,GAGvC,GAAIF,IAAa,OAAW,MAAO,GAEnC,GAAIC,IAAe,OAClB,MAAM,IAAIG,EACT,4EACA,qFACD,EAED,IAAMC,EAAgBP,EAAO,aAAa,UACxCK,GAAgBA,EAAY,OAASF,CACvC,EAEA,GAAII,IAAkB,GACrB,MAAM,IAAID,EACT,+DACD,EAED,OAAOJ,IAAa,SACjBE,EAAsBG,EACtBH,EAAsBG,CAC1B,CACD,EFxCO,IAAMC,EAAiBC,EAAc,oBAAoB,EAC/D,CAACC,EAAQ,CAAE,YAAAC,EAAa,aAAAC,CAAa,IAA4B,CAChE,GAAM,CAAE,OAAAC,EAAQ,aAAAC,CAAa,EAAIJ,EACjC,GACCE,GACAG,EAAeL,EAAQ,CACtB,KAAMC,EAAY,IACnB,CAAC,EACA,CACDE,EAAO,KACN,gBAAgBF,EAAY,IAAI,wEACjC,EAEA,MACD,CAEAG,EAAa,CACZ,aAAc,CAACH,CAAW,CAC3B,CAAC,CACF,CACD","names":["defineUtility","_hook","fn","AstroError","hasIntegration","defineUtility","config","name","position","relativeTo","integrationPosition","integration","AstroError","otherPosition","addIntegration","defineUtility","params","integration","ensureUnique","logger","updateConfig","hasIntegration"]}