{"version":3,"sources":["../../src/core/define-utility.ts","../../src/utilities/has-vite-plugin.ts","../../src/utilities/add-vite-plugin.ts"],"sourcesContent":["import type { HookParameters, Hooks } from \"./types.js\";\n\n/**\n * Allows defining a type-safe function requiring all the params of a given hook.\n * It uses currying to make TypeScript happy.\n *\n * @param {string} _hook\n *\n * @see https://astro-integration-kit.netlify.app/utilities/define-utility/\n *\n * @example\n * ```ts\n * const test = defineUtility(\"astro:config:setup\")((params, foo: boolean) => {\n *  return \"bar\";\n * });\n * ```\n */\nexport const defineUtility =\n\t<THook extends keyof Hooks>(_hook: THook) =>\n\t/**\n\t * The function itself\n\t * @param {Function} fn;\n\t */\n\t<TFn extends (params: HookParameters<THook>, ...args: Array<any>) => any>(\n\t\tfn: TFn,\n\t) =>\n\t\tfn;\n","import type { AstroConfig } from \"astro\";\nimport type { PluginOption } from \"vite\";\nimport { defineUtility } from \"../core/define-utility.js\";\n\nfunction getPluginNames(plugins: AstroConfig[\"vite\"][\"plugins\"]) {\n\tconst names: string[] = [];\n\n\tif (plugins) {\n\t\tfor (const plugin of plugins) {\n\t\t\tif (!plugin) continue;\n\n\t\t\tif (Array.isArray(plugin)) {\n\t\t\t\tnames.push(...getPluginNames(plugin));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (plugin instanceof Promise) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnames.push(plugin.name);\n\t\t}\n\t}\n\n\treturn names;\n}\n\n/**\n * Checks for the existence of a Vite plugin inside the Astro config.\n *\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">} params\n * @param {Params} options\n * @param {string | import(\"vite\").PluginOption} options.plugin\n *\n * @see https://astro-integration-kit.netlify.app/utilities/has-vite-plugin/\n *\n * @example\n * ```ts\n * hasVitePlugin(params, {\n * \t\tplugin: \"vite-plugin-my-integration\",\n * })\n * ```\n */\nexport const hasVitePlugin = defineUtility(\"astro:config:setup\")(\n\t(\n\t\t{ config },\n\t\t{\n\t\t\tplugin,\n\t\t}: {\n\t\t\tplugin: string | PluginOption;\n\t\t},\n\t): boolean => {\n\t\tif (!plugin || plugin instanceof Promise) return false;\n\n\t\tconst currentPlugins = new Set(getPluginNames(config?.vite?.plugins));\n\n\t\tconst plugins = new Set<string>();\n\n\t\tif (typeof plugin === \"string\") {\n\t\t\tplugins.add(plugin);\n\t\t}\n\n\t\tif (typeof plugin === \"object\") {\n\t\t\tif (Array.isArray(plugin)) {\n\t\t\t\tconst names = new Set(\n\t\t\t\t\tgetPluginNames(plugin as NonNullable<AstroConfig[\"vite\"][\"plugins\"]>),\n\t\t\t\t);\n\t\t\t\tfor (const name of names) plugins.add(name);\n\t\t\t} else {\n\t\t\t\tplugins.add(plugin.name);\n\t\t\t}\n\t\t}\n\n\t\treturn [...plugins].some((name) => currentPlugins.has(name));\n\t},\n);\n","import type { Plugin, PluginOption } from \"vite\";\nimport { defineUtility } from \"../core/define-utility.js\";\nimport { hasVitePlugin } from \"./has-vite-plugin.js\";\n\n/**\n * Adds a [vite plugin](https://vitejs.dev/guide/using-plugins) to the\n * Astro config.\n *\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">} params\n * @param {object} options\n * @param {import(\"vite\").PluginOption} options.plugin\n * @param {boolean} [options.warnDuplicated=true]\n *\n * @see https://astro-integration-kit.netlify.app/utilities/add-vite-plugin/\n *\n * @example\n * ```ts\n * addVitePlugin(params, {\n * \t\tplugin,\n * \t\twarnDuplicated: true,\n * })\n * ```\n */\nexport const addVitePlugin = defineUtility(\"astro:config:setup\")(\n\t(\n\t\tparams,\n\t\t{\n\t\t\tplugin,\n\t\t\twarnDuplicated = true,\n\t\t}: {\n\t\t\tplugin: PluginOption;\n\t\t\twarnDuplicated?: boolean;\n\t\t},\n\t) => {\n\t\tconst { updateConfig, logger } = params;\n\n\t\tif (warnDuplicated && hasVitePlugin(params, { plugin })) {\n\t\t\tlogger.warn(\n\t\t\t\t`The Vite plugin \"${\n\t\t\t\t\t(plugin as Plugin).name\n\t\t\t\t}\" is already present in your Vite configuration, this plugin may not behave correctly.`,\n\t\t\t);\n\t\t}\n\n\t\tupdateConfig({\n\t\t\tvite: {\n\t\t\t\tplugins: [plugin],\n\t\t\t},\n\t\t});\n\t},\n);\n"],"mappings":"AAiBO,IAAMA,EACgBC,GAM3BC,GAEAA,ECtBF,SAASC,EAAeC,EAAyC,CAChE,IAAMC,EAAkB,CAAC,EAEzB,GAAID,GACH,QAAWE,KAAUF,EACpB,GAAKE,EAEL,IAAI,MAAM,QAAQA,CAAM,EAAG,CAC1BD,EAAM,KAAK,GAAGF,EAAeG,CAAM,CAAC,EACpC,QACD,CAEIA,aAAkB,SAItBD,EAAM,KAAKC,EAAO,IAAI,GAIxB,OAAOD,CACR,CAkBO,IAAME,EAAgBC,EAAc,oBAAoB,EAC9D,CACC,CAAE,OAAAC,CAAO,EACT,CACC,OAAAH,CACD,IAGa,CACb,GAAI,CAACA,GAAUA,aAAkB,QAAS,MAAO,GAEjD,IAAMI,EAAiB,IAAI,IAAIP,EAAeM,GAAQ,MAAM,OAAO,CAAC,EAE9DL,EAAU,IAAI,IAMpB,GAJI,OAAOE,GAAW,UACrBF,EAAQ,IAAIE,CAAM,EAGf,OAAOA,GAAW,SACrB,GAAI,MAAM,QAAQA,CAAM,EAAG,CAC1B,IAAMD,EAAQ,IAAI,IACjBF,EAAeG,CAAqD,CACrE,EACA,QAAWK,KAAQN,EAAOD,EAAQ,IAAIO,CAAI,CAC3C,MACCP,EAAQ,IAAIE,EAAO,IAAI,EAIzB,MAAO,CAAC,GAAGF,CAAO,EAAE,KAAMO,GAASD,EAAe,IAAIC,CAAI,CAAC,CAC5D,CACD,ECpDO,IAAMC,EAAgBC,EAAc,oBAAoB,EAC9D,CACCC,EACA,CACC,OAAAC,EACA,eAAAC,EAAiB,EAClB,IAII,CACJ,GAAM,CAAE,aAAAC,EAAc,OAAAC,CAAO,EAAIJ,EAE7BE,GAAkBG,EAAcL,EAAQ,CAAE,OAAAC,CAAO,CAAC,GACrDG,EAAO,KACN,oBACEH,EAAkB,IACpB,wFACD,EAGDE,EAAa,CACZ,KAAM,CACL,QAAS,CAACF,CAAM,CACjB,CACD,CAAC,CACF,CACD","names":["defineUtility","_hook","fn","getPluginNames","plugins","names","plugin","hasVitePlugin","defineUtility","config","currentPlugins","name","addVitePlugin","defineUtility","params","plugin","warnDuplicated","updateConfig","logger","hasVitePlugin"]}