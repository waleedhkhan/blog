{"version":3,"sources":["../../src/utilities/watch-directory.ts","../../src/core/define-utility.ts"],"sourcesContent":["import { readdirSync, statSync } from \"node:fs\";\nimport { join, relative, resolve } from \"pathe\";\nimport { defineUtility } from \"../core/define-utility.js\";\n\nconst getFilesRecursively = (dir: string, baseDir = dir) => {\n\tconst files = readdirSync(dir);\n\tlet filepaths: Array<string> = [];\n\n\tfor (const file of files) {\n\t\tconst filepath = join(dir, file);\n\t\tconst _stat = statSync(filepath);\n\n\t\tif (_stat.isDirectory()) {\n\t\t\t// Recursively get files from subdirectories\n\t\t\tconst subDirectoryFiles = getFilesRecursively(filepath, baseDir);\n\t\t\tfilepaths = filepaths.concat(subDirectoryFiles);\n\t\t} else {\n\t\t\t// Calculate relative path and add it to the array\n\t\t\tconst relativePath = relative(baseDir, filepath);\n\t\t\tfilepaths.push(relativePath);\n\t\t}\n\t}\n\n\treturn filepaths;\n};\n\n/**\n * In development, will reload the Astro dev server if any files within\n * the directory has changed.\n *\n * @param {import(\"astro\").HookParameters<\"astro:config:setup\">} params\n * @param {string} directory\n *\n * @see https://astro-integration-kit.netlify.app/utilities/watch-directory/\n *\n * @example\n * ```ts\n * watchDirectory(params, resolve())\n * ```\n */\nexport const watchDirectory = defineUtility(\"astro:config:setup\")(\n\t({ addWatchFile, command, updateConfig }, directory: string) => {\n\t\tif (command !== \"dev\") {\n\t\t\treturn;\n\t\t}\n\n\t\tconst paths = getFilesRecursively(directory).map((p) =>\n\t\t\tresolve(directory, p),\n\t\t);\n\n\t\tfor (const path of paths) {\n\t\t\taddWatchFile(path);\n\t\t}\n\n\t\tupdateConfig({\n\t\t\tvite: {\n\t\t\t\tplugins: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: `rollup-aik-watch-directory-${directory}`,\n\t\t\t\t\t\tbuildStart() {\n\t\t\t\t\t\t\tfor (const path of paths) {\n\t\t\t\t\t\t\t\tthis.addWatchFile(path);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t},\n);\n","import type { HookParameters, Hooks } from \"./types.js\";\n\n/**\n * Allows defining a type-safe function requiring all the params of a given hook.\n * It uses currying to make TypeScript happy.\n *\n * @param {string} _hook\n *\n * @see https://astro-integration-kit.netlify.app/utilities/define-utility/\n *\n * @example\n * ```ts\n * const test = defineUtility(\"astro:config:setup\")((params, foo: boolean) => {\n *  return \"bar\";\n * });\n * ```\n */\nexport const defineUtility =\n\t<THook extends keyof Hooks>(_hook: THook) =>\n\t/**\n\t * The function itself\n\t * @param {Function} fn;\n\t */\n\t<TFn extends (params: HookParameters<THook>, ...args: Array<any>) => any>(\n\t\tfn: TFn,\n\t) =>\n\t\tfn;\n"],"mappings":"AAAA,OAAS,eAAAA,EAAa,YAAAC,MAAgB,UACtC,OAAS,QAAAC,EAAM,YAAAC,EAAU,WAAAC,MAAe,QCgBjC,IAAMC,EACgBC,GAM3BC,GAEAA,EDtBF,IAAMC,EAAsB,CAACC,EAAaC,EAAUD,IAAQ,CAC3D,IAAME,EAAQC,EAAYH,CAAG,EACzBI,EAA2B,CAAC,EAEhC,QAAWC,KAAQH,EAAO,CACzB,IAAMI,EAAWC,EAAKP,EAAKK,CAAI,EAG/B,GAFcG,EAASF,CAAQ,EAErB,YAAY,EAAG,CAExB,IAAMG,EAAoBV,EAAoBO,EAAUL,CAAO,EAC/DG,EAAYA,EAAU,OAAOK,CAAiB,CAC/C,KAAO,CAEN,IAAMC,EAAeC,EAASV,EAASK,CAAQ,EAC/CF,EAAU,KAAKM,CAAY,CAC5B,CACD,CAEA,OAAON,CACR,EAgBaQ,EAAiBC,EAAc,oBAAoB,EAC/D,CAAC,CAAE,aAAAC,EAAc,QAAAC,EAAS,aAAAC,CAAa,EAAGC,IAAsB,CAC/D,GAAIF,IAAY,MACf,OAGD,IAAMG,EAAQnB,EAAoBkB,CAAS,EAAE,IAAKE,GACjDC,EAAQH,EAAWE,CAAC,CACrB,EAEA,QAAWE,KAAQH,EAClBJ,EAAaO,CAAI,EAGlBL,EAAa,CACZ,KAAM,CACL,QAAS,CACR,CACC,KAAM,8BAA8BC,CAAS,GAC7C,YAAa,CACZ,QAAWI,KAAQH,EAClB,KAAK,aAAaG,CAAI,CAExB,CACD,CACD,CACD,CACD,CAAC,CACF,CACD","names":["readdirSync","statSync","join","relative","resolve","defineUtility","_hook","fn","getFilesRecursively","dir","baseDir","files","readdirSync","filepaths","file","filepath","join","statSync","subDirectoryFiles","relativePath","relative","watchDirectory","defineUtility","addWatchFile","command","updateConfig","directory","paths","p","resolve","path"]}