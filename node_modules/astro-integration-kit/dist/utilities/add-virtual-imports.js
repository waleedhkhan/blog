import{AstroError as d}from"astro/errors";var a=e=>t=>t;function f(e){let t=[];if(e){for(let o of e)if(o){if(Array.isArray(o)){t.push(...f(o));continue}o instanceof Promise||t.push(o.name)}}return t}var l=a("astro:config:setup")(({config:e},{plugin:t})=>{if(!t||t instanceof Promise)return!1;let o=new Set(f(e?.vite?.plugins)),n=new Set;if(typeof t=="string"&&n.add(t),typeof t=="object")if(Array.isArray(t)){let i=new Set(f(t));for(let u of i)n.add(u)}else n.add(t.name);return[...n].some(i=>o.has(i))});var g=a("astro:config:setup")((e,{plugin:t,warnDuplicated:o=!0})=>{let{updateConfig:n,logger:i}=e;o&&l(e,{plugin:t})&&i.warn(`The Vite plugin "${t.name}" is already present in your Vite configuration, this plugin may not behave correctly.`),n({vite:{plugins:[t]}})});var h=e=>{let t=1;return`${e.replace(/-(\d+)$/,(o,n)=>(t=parseInt(n)+1,""))}-${t}`},y=e=>`\0${e}`,v=(e,t,o)=>{let n=Array.isArray(t)?t:Object.entries(t).map(([r,s])=>({id:r,content:s,context:void 0})),i={};for(let{id:r,context:s}of n)i[r]??=[],i[r]?.push(...s===void 0?["server","client"]:[s]);for(let[r,s]of Object.entries(i))if(s.length!==[...new Set(s)].length)throw new d(`Virtual import with id "${r}" has been registered several times with conflicting contexts.`);let u=Object.fromEntries(n.map(({id:r})=>{if(!o&&r.startsWith("astro:"))throw new d(`Virtual import name prefix can't be "astro:" (for "${r}") because it's reserved for Astro core.`);return[y(r),r]}));return{name:e,resolveId(r){if(n.find(s=>s.id===r))return y(r)},load(r,s){let p=u[r];if(p){let P=s?.ssr?"server":"client",m=n.find(c=>c.id===p&&(c.context===void 0||c.context===P));if(m)return m.content}}}},H=a("astro:config:setup")((e,{name:t,imports:o,__enableCorePowerDoNotUseOrYouWillBeFired:n=!1})=>{let i=`vite-plugin-${t}`;for(;l(e,{plugin:i});)i=h(i);g(e,{warnDuplicated:!1,plugin:v(i,o,n)})});export{H as addVirtualImports};
//# sourceMappingURL=add-virtual-imports.js.map