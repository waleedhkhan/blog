import * as astro from 'astro';
import { AstroConfig } from 'astro';
import { D as DeepPartial } from '../type-utils.d-CSknV27i.js';
import { PluginOption } from 'vite';

/**
 * Checks for the existence of a Vite plugin inside the Astro config.
 *
 * @param {import("astro").HookParameters<"astro:config:setup">} params
 * @param {Params} options
 * @param {string | import("vite").PluginOption} options.plugin
 *
 * @see https://astro-integration-kit.netlify.app/utilities/has-vite-plugin/
 *
 * @example
 * ```ts
 * hasVitePlugin(params, {
 * 		plugin: "vite-plugin-my-integration",
 * })
 * ```
 */
declare const hasVitePlugin: ({ config }: {
    config: AstroConfig;
    command: "dev" | "build" | "preview";
    isRestart: boolean;
    updateConfig: (newConfig: DeepPartial<AstroConfig>) => AstroConfig;
    addRenderer: (renderer: astro.AstroRenderer) => void;
    addWatchFile: (path: string | URL) => void;
    injectScript: (stage: astro.InjectedScriptStage, content: string) => void;
    injectRoute: (injectRoute: astro.InjectedRoute) => void;
    addClientDirective: (directive: astro.ClientDirectiveConfig) => void;
    addDevOverlayPlugin: (entrypoint: string) => void;
    addDevToolbarApp: (entrypoint: string) => void;
    addMiddleware: (mid: astro.AstroIntegrationMiddleware) => void;
    logger: astro.AstroIntegrationLogger;
}, { plugin, }: {
    plugin: string | PluginOption;
}) => boolean;

export { hasVitePlugin };
