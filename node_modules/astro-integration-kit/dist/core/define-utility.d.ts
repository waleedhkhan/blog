import { HookParameters } from './types.js';
import 'astro';
import '../internal/types.js';

/**
 * Allows defining a type-safe function requiring all the params of a given hook.
 * It uses currying to make TypeScript happy.
 *
 * @param {string} _hook
 *
 * @see https://astro-integration-kit.netlify.app/utilities/define-utility/
 *
 * @example
 * ```ts
 * const test = defineUtility("astro:config:setup")((params, foo: boolean) => {
 *  return "bar";
 * });
 * ```
 */
declare const defineUtility: <THook extends "astro:config:setup" | "astro:config:done" | "astro:server:setup" | "astro:server:start" | "astro:server:done" | "astro:build:ssr" | "astro:build:start" | "astro:build:setup" | "astro:build:generated" | "astro:build:done" | "astro:db:setup">(_hook: THook) => <TFn extends (params: HookParameters<THook>, ...args: Array<any>) => any>(fn: TFn) => TFn;

export { defineUtility };
