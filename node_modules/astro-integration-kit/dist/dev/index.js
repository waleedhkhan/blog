import{z as h}from"astro/zod";import{AstroError as v}from"astro/errors";import{z as S}from"astro/zod";var u=(e,n)=>{let r=m(e.path);if(e.code==="invalid_union"){let o=new Map;for(let t of e.unionErrors.flatMap(i=>i.errors))if(t.code==="invalid_type"||t.code==="invalid_literal"){let i=m(t.path);o.has(i)?o.get(i).expected.push(t.expected):o.set(i,{code:t.code,received:t.received,expected:[t.expected]})}return{message:[p(r,o.size?"Did not match union:":"Did not match union.")].concat([...o.entries()].filter(([,t])=>t.expected.length===e.unionErrors.length).map(([t,i])=>t===r?`> ${c(i)}`:`> ${p(t,c(i))}`)).join(`
`)}}return e.code==="invalid_literal"||e.code==="invalid_type"?{message:p(r,c({code:e.code,received:e.received,expected:[e.expected]}))}:e.message?{message:p(r,e.message)}:{message:p(r,n.defaultError)}},c=e=>{if(e.received==="undefined")return"Required";let n=new Set(e.expected);switch(e.code){case"invalid_type":return`Expected type \`${d(n)}\`, received ${JSON.stringify(e.received)}`;case"invalid_literal":return`Expected \`${d(n)}\`, received ${JSON.stringify(e.received)}`}},p=(e,n)=>e.length?`**${e}**: ${n}`:n,d=e=>[...e].map((n,r)=>r===0?JSON.stringify(n):` | ${JSON.stringify(n)}`).join(""),m=e=>e.join(".");var f=({name:e,optionsSchema:n,setup:r})=>(...o)=>{let s=(n??S.never().optional()).safeParse(o[0],{errorMap:u});if(!s.success)throw new v(`Invalid options passed to "${e}" integration
`,s.error.issues.map(a=>a.message).join(`
`));let t=s.data,i=r({name:e,options:t});return{name:e,...i}};import{readdirSync as T,statSync as x}from"node:fs";import{join as O,relative as k,resolve as z}from"pathe";var l=e=>n=>n;var g=(e,n=e)=>{let r=T(e),o=[];for(let s of r){let t=O(e,s);if(x(t).isDirectory()){let a=g(t,n);o=o.concat(a)}else{let a=k(n,t);o.push(a)}}return o},y=l("astro:config:setup")(({addWatchFile:e,command:n,updateConfig:r},o)=>{if(n!=="dev")return;let s=g(o).map(t=>z(o,t));for(let t of s)e(t);r({vite:{plugins:[{name:`rollup-aik-watch-directory-${o}`,buildStart(){for(let t of s)this.addWatchFile(t)}}]}})});var A=f({name:"astro-integration-kit/hmr",optionsSchema:h.object({directory:h.string()}),setup({options:e}){return{hooks:{"astro:config:setup":n=>{y(n,e.directory)}}}}});export{A as hmrIntegration};
//# sourceMappingURL=index.js.map