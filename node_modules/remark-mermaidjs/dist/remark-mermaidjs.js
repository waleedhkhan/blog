import { fromHtmlIsomorphic } from 'hast-util-from-html-isomorphic';
import { createMermaidRenderer } from 'mermaid-isomorphic';
import { visitParents } from 'unist-util-visit-parents';
/**
 * @param options
 *   Options that may be used to tweak the output.
 */
const remarkMermaid = (options) => {
    const render = createMermaidRenderer(options);
    return function transformer(ast, file) {
        const instances = [];
        visitParents(ast, { type: 'code', lang: 'mermaid' }, (node, ancestors) => {
            instances.push([...ancestors, node]);
        });
        // Nothing to do. No need to start a browser in this case.
        if (!instances.length) {
            return;
        }
        return render(instances.map((ancestors) => ancestors.at(-1).value), options).then((results) => {
            for (const [i, ancestors] of instances.entries()) {
                const result = results[i];
                const node = ancestors.at(-1);
                const parent = ancestors.at(-2);
                const nodeIndex = parent.children.indexOf(node);
                if (result.status === 'fulfilled') {
                    const { svg } = result.value;
                    const hChildren = fromHtmlIsomorphic(svg, { fragment: true }).children;
                    parent.children[nodeIndex] = {
                        type: 'paragraph',
                        children: [{ type: 'html', value: svg }],
                        data: { hChildren }
                    };
                }
                else if (options?.errorFallback) {
                    const fallback = options.errorFallback(node, result.reason, file);
                    if (fallback) {
                        parent.children[nodeIndex] = fallback;
                    }
                    else {
                        parent.children.splice(nodeIndex, 1);
                    }
                }
                else {
                    const message = file.message(result.reason, {
                        ruleId: 'remark-mermaidjs',
                        source: 'remark-mermaidjs',
                        ancestors
                    });
                    message.fatal = true;
                    message.url = 'https://github.com/remcohaszing/remark-mermaidjs';
                    throw message;
                }
            }
        });
    };
};
export default remarkMermaid;
//# sourceMappingURL=remark-mermaidjs.js.map