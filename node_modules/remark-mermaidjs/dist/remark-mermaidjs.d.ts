import { type BlockContent, type Code, type Root } from 'mdast';
import { type CreateMermaidRendererOptions, type RenderOptions } from 'mermaid-isomorphic';
import { type Plugin } from 'unified';
import { type VFile } from 'vfile';
export interface RemarkMermaidOptions extends CreateMermaidRendererOptions, Omit<RenderOptions, 'screenshot'> {
    /**
     * Create a fallback node if processing of a mermaid diagram fails.
     *
     * @param node
     *   The mdast `code` node that couldnâ€™t be rendered.
     * @param error
     *   The error message that was thrown.
     * @param file
     *   The file on which the error occurred.
     * @returns
     *   A fallback node to render instead of the invalid diagram. If nothing is returned, the code
     *   block is removed
     */
    errorFallback?: (node: Code, error: string, file: VFile) => BlockContent | undefined | void;
}
/**
 * @param options
 *   Options that may be used to tweak the output.
 */
declare const remarkMermaid: Plugin<[RemarkMermaidOptions?], Root>;
export default remarkMermaid;
//# sourceMappingURL=remark-mermaidjs.d.ts.map