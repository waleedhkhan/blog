import { UrlTransformer, ImageCdn, CdnOptions, UrlTransformerOptions } from 'unpic';

/**
 * HTML image attributes, common to image components in multiple frameworks.
 * For React (and potentially other frameworks added in the future), convert to camelCase.
 */
interface CoreImageAttributes<TStyle = Record<string, string>> {
    src?: string | number | null;
    width?: string | number | null;
    height?: string | number | null;
    alt?: string | number | null;
    loading?: "eager" | "lazy" | null;
    decoding?: "sync" | "async" | "auto" | null;
    style?: TStyle;
    srcset?: string | number | null;
    role?: "presentation" | "img" | "none" | "figure" | (string & {}) | null;
    sizes?: string | number | null;
    fetchpriority?: "high" | "low" | "auto" | null;
}
interface ImageSourceOptions {
    src: string;
    width?: number;
    height?: number;
    aspectRatio?: number;
    layout?: Layout;
    breakpoints?: number[];
    transformer?: UrlTransformer;
    cdn?: ImageCdn;
    cdnOptions?: CdnOptions;
}
type ObjectFit = "contain" | "cover" | "fill" | "none" | "scale-down" | "inherit" | "initial";
type BaseImageProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = Omit<TImageAttributes, "srcset" | "style"> & ImageSourceOptions & {
    priority?: boolean;
    fetchpriority?: "high" | "low";
    background?: string;
    objectFit?: ObjectFit;
    unstyled?: boolean;
};
interface CoreSourceAttributes {
    srcset?: string | null;
    type?: string | null;
    sizes?: string | null;
    media?: string | null;
}
type BaseSourceProps = Omit<CoreSourceAttributes, "srcset"> & ImageSourceOptions & {
    objectFit?: ObjectFit;
};
type BaseImageWithAspectRatioProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = BaseImageProps<TImageAttributes, TStyle> & {
    aspectRatio: number;
};
type BaseSourceWithAspectRatioProps = BaseSourceProps & {
    aspectRatio: number;
};
type ImageWithAspectRatioAndWidthProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = BaseImageWithAspectRatioProps<TImageAttributes, TStyle> & {
    width: number;
};
type SourceWithAspectRatioAndWidthProps = BaseSourceWithAspectRatioProps & {
    width: number;
};
type ImageWithAspectRatioAndHeightProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = BaseImageWithAspectRatioProps<TImageAttributes, TStyle> & {
    height: number;
};
type SourceWithAspectRatioAndHeightProps = BaseSourceWithAspectRatioProps & {
    height: number;
};
type ImageWithWidthAndHeightProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = BaseImageProps<TImageAttributes, TStyle> & {
    width: number;
    height: number;
};
type SourceWithWidthAndHeightProps = BaseSourceProps & {
    width: number;
    height: number;
};
type ImageWithSizeProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = ImageWithAspectRatioAndWidthProps<TImageAttributes, TStyle> | ImageWithAspectRatioAndHeightProps<TImageAttributes, TStyle> | ImageWithWidthAndHeightProps<TImageAttributes, TStyle>;
type SourceWithSizeProps = SourceWithAspectRatioAndWidthProps | SourceWithAspectRatioAndHeightProps | SourceWithWidthAndHeightProps;
type FixedImageProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = Prettify<ImageWithSizeProps<TImageAttributes, TStyle> & {
    layout: "fixed";
}>;
type FixedSourceProps = SourceWithSizeProps & {
    layout: "fixed";
};
type ConstrainedImageProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = ImageWithSizeProps<TImageAttributes, TStyle> & {
    layout?: "constrained";
};
type ConstrainedSourceProps = SourceWithSizeProps & {
    layout?: "constrained";
};
type FullWidthImageProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle> = BaseImageProps<TImageAttributes, TStyle> & {
    layout: "fullWidth";
    width?: never;
};
type FullWidthSourceProps = BaseSourceProps & {
    layout: "fullWidth";
    width?: never;
};
type UnpicImageProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle = TImageAttributes["style"]> = FixedImageProps<TImageAttributes, TStyle> | ConstrainedImageProps<TImageAttributes, TStyle> | FullWidthImageProps<TImageAttributes, TStyle>;
type UnpicSourceProps = FixedSourceProps | ConstrainedSourceProps | FullWidthSourceProps;
type Layout = "fixed" | "constrained" | "fullWidth";
type Prettify<T> = {
    [K in keyof T]: T[K];
} & {};

declare function logError(...args: unknown[]): void;
/**
 * Gets the `sizes` attribute for an image, based on the layout and width
 */
declare const getSizes: (width?: number, layout?: Layout) => string | undefined;
/**
 * Gets the styles for an image
 */
declare const getStyle: <TImageAttributes extends CoreImageAttributes<TStyle>, TStyle = Record<string, string>>({ width, height, aspectRatio, layout, objectFit, background, }: Pick<UnpicImageProps<TImageAttributes, TStyle>, "width" | "height" | "aspectRatio" | "layout" | "objectFit" | "background">) => TImageAttributes["style"];
declare const DEFAULT_RESOLUTIONS: number[];
/**
 * Gets the breakpoints for an image, based on the layout and width
 */
declare const getBreakpoints: ({ width, layout, resolutions, }: {
    width?: number;
    layout: Layout;
    resolutions?: Array<number>;
}) => number[];
type SrcSetOptions = Omit<ImageSourceOptions, "src"> & {
    src: URL | string;
    format?: string;
};
declare const getSrcSetEntries: ({ src, width, layout, height, aspectRatio, breakpoints, cdn, transformer, format, cdnOptions, }: SrcSetOptions) => Array<UrlTransformerOptions>;
/**
 * Generate an image srcset
 */
declare const getSrcSet: (options: SrcSetOptions) => string;
declare function transformSharedProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle = Record<string, string>>({ width, height, priority, layout, aspectRatio, ...props }: UnpicImageProps<TImageAttributes, TStyle>): UnpicImageProps<TImageAttributes, TStyle> & Pick<TImageAttributes, "srcset" | "style">;
/**
 * Generates the props for an img element
 */
declare function transformProps<TImageAttributes extends CoreImageAttributes<TStyle>, TStyle = Record<string, string>>(props: UnpicImageProps<TImageAttributes, TStyle>): TImageAttributes;
declare function normalizeImageType(type?: string | null): {
    format?: string;
    mimeType?: string;
};
/**
 * Generates the props for a `<source>` element
 */
declare function transformSourceProps<TSourceAttributes extends CoreSourceAttributes>({ media, type, ...props }: UnpicSourceProps): TSourceAttributes;
interface ImageSizeMetadata {
    width: number;
    height: number;
}
declare function inferImageDimensions(props: Pick<UnpicImageProps<CoreImageAttributes>, "width" | "height" | "aspectRatio">, imageData: ImageSizeMetadata): {
    width: number;
    height: number;
};

export { type BaseImageProps, type BaseSourceProps, type ConstrainedImageProps, type ConstrainedSourceProps, type CoreImageAttributes, type CoreSourceAttributes, DEFAULT_RESOLUTIONS, type FixedImageProps, type FixedSourceProps, type FullWidthImageProps, type FullWidthSourceProps, type ImageSizeMetadata, type ImageSourceOptions, type Layout, type ObjectFit, type SrcSetOptions, type UnpicImageProps, type UnpicSourceProps, getBreakpoints, getSizes, getSrcSet, getSrcSetEntries, getStyle, inferImageDimensions, logError, normalizeImageType, transformProps, transformSharedProps, transformSourceProps };
