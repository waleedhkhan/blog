"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPixels = exports.getFormat = exports.getDataFromUrl = void 0;
const jpeg_js_1 = require("jpeg-js");
const browser_js_1 = require("pngjs/browser.js");
const get_pixels_js_1 = require("./get-pixels.js");
const node_buffer_1 = require("node:buffer");
var get_pixels_js_2 = require("./get-pixels.js");
Object.defineProperty(exports, "getDataFromUrl", { enumerable: true, get: function () { return get_pixels_js_2.getDataFromUrl; } });
Object.defineProperty(exports, "getFormat", { enumerable: true, get: function () { return get_pixels_js_2.getFormat; } });
const decoders = {
    jpg: (image) => (0, jpeg_js_1.decode)(image, { useTArray: true }),
    png: (image) => {
        return new Promise((resolve, reject) => {
            const png = new browser_js_1.PNG({ filterType: 4 });
            const buf = node_buffer_1.Buffer.from(image);
            png.parse(buf, (err, decoded) => {
                if (err) {
                    reject(err);
                }
                else {
                    const { width, height, data } = decoded;
                    resolve({ width, height, data });
                }
            });
        });
    },
};
/**
 * Gets the raw pixel data from an image source.
 * The source can be a URL, a string containing the URL, a Uint8Array containing the image data,
 * or an ArrayBuffer containing the image data.
 */
const getPixels = (source) => {
    return (0, get_pixels_js_1.getPixels)(source, decoders);
};
exports.getPixels = getPixels;
