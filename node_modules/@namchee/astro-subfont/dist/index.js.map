{"version":3,"sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import { defineIntegration } from \"astro-integration-kit\";\n\nimport { z } from \"astro/zod\";\n\nimport { execSync } from \"node:child_process\";\nimport { resolve } from \"node:path\";\n\nimport kleur from \"kleur\";\n\nimport { getCurrentTime, getTotalSavings } from \"./utils.js\";\n\nexport const subset = defineIntegration({\n  name: \"subset\",\n  optionsSchema: z\n    .object({\n      /**\n       * List of characters to be whitelisted outside of detected glyphs.\n       *\n       * @default `''`\n       */\n      whitelist: z.string().optional().default(\"\"),\n      /**\n       * Attempt to optimize unused variable fonts features such as\n       * weights, slants, etc when its unused.\n       *\n       * This feature is experimental and might break your fonts.\n       *\n       * @default `false`\n       */\n      optimizeVariableFonts: z.boolean().optional().default(true),\n      /**\n       * Inline the optimized fonts directly in the `@font-face` declaration.\n       *\n       * @default `false`\n       */\n      inline: z.boolean().optional().default(false),\n      /**\n       * Analyze webfonts usage dynamically by running headless browsers.\n       *\n       * Mainly used for on-demand renders.\n       *\n       * @default `false`\n       */\n      dynamic: z.boolean().optional().default(false),\n      /**\n       * Enable verbose output to `stdout`.\n       *\n       * @default `false`\n       */\n      debug: z.boolean().optional().default(false),\n    })\n    .optional()\n    .default({}),\n  setup: ({ options }) => {\n    return {\n      hooks: {\n        \"astro:build:done\": ({ dir, pages }) => {\n          const flags = [\"--in-place\", \"--no-fallbacks\"];\n          if (options?.whitelist) {\n            flags.push(`--text=${options.whitelist}`);\n          }\n\n          if (options?.optimizeVariableFonts) {\n            flags.push(\"--instance\");\n          }\n\n          if (options?.inline) {\n            flags.push(\"--inline-css\");\n          }\n\n          if (options?.dynamic) {\n            flags.push(\"--dynamic\");\n          }\n\n          const input = pages.map(({ pathname }) => {\n            const parts = [dir.pathname, pathname];\n            if (pathname.startsWith(\"404\")) {\n              parts[1] = `${pathname.slice(0, -1)}.html`;\n            } else {\n              parts.push(\"index.html\");\n            }\n\n            return resolve(...parts);\n          });\n\n          console.log(\n            kleur\n              .bgGreen()\n              .black(\" [astro-subfont] generating optimized fonts \"),\n          );\n\n          const command = `subfont ${input.join(\" \")} ${flags.join(\" \")}`;\n          if (options?.debug) {\n            console.log(\n              kleur.dim(getCurrentTime()),\n              kleur.green(\"Detected pages:\"),\n            );\n\n            for (const page of input) {\n              console.log(\n                kleur.dim(getCurrentTime()),\n                kleur.green(\"▶\"),\n                page.replace(dir.pathname, \"\"),\n              );\n\n              console.log(\n                kleur.dim(getCurrentTime()),\n                kleur.green(\"  └─\"),\n                kleur.dim(page),\n              );\n            }\n          }\n\n          try {\n            const output = execSync(command, { stdio: 'pipe' });\n            const bytesSaved = getTotalSavings(output.toString());\n\n            console.log(\n              kleur.dim(getCurrentTime()),\n              kleur.green(\n                `✓ Successfully reduced font payload by ${bytesSaved}`,\n              ),\n              \"\\n\",\n            );\n          } catch (err) {\n            console.error(\n              kleur.bgRed(`Failed to optimize fonts due to ${err}`),\n            );\n          }\n        },\n      },\n    };\n  },\n});\n","/**\n * Get total bytes saved by the optimization\n *\n * @param {string} output - Output of the terminal\n * @returns {string} total saved bytes\n */\nexport function getTotalSavings(output: string): string {\n  const pattern = output.match(/Total savings: (-?[\\d\\.]+ .+[b|B])/);\n\n  return pattern?.[1] ? pattern[1] : '';\n}\n\n/**\n * Get current time of execution in HH:mm:ss format.\n *\n * This function calculate datetime locally.\n *\n * @returns {string} Time string in HH:mm:ss format.\n */\nexport function getCurrentTime(): string {\n  const now = new Date();\n\n  return `${now.getHours().toString().padStart(2, \"0\")}:${now\n    .getMinutes()\n    .toString()\n    .padStart(2, \"0\")}:${now.getSeconds().toString().padStart(2, \"0\")}`;\n};\n"],"mappings":"AAAA,OAAS,qBAAAA,MAAyB,wBAElC,OAAS,KAAAC,MAAS,YAElB,OAAS,YAAAC,MAAgB,gBACzB,OAAS,WAAAC,MAAe,OAExB,OAAOC,MAAW,QCDX,SAASC,EAAgBC,EAAwB,CACtD,IAAMC,EAAUD,EAAO,MAAM,oCAAoC,EAEjE,OAAOC,IAAU,CAAC,EAAIA,EAAQ,CAAC,EAAI,EACrC,CASO,SAASC,GAAyB,CACvC,IAAMC,EAAM,IAAI,KAEhB,MAAO,GAAGA,EAAI,SAAS,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,CAAC,IAAIA,EACrD,WAAW,EACX,SAAS,EACT,SAAS,EAAG,GAAG,CAAC,IAAIA,EAAI,WAAW,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,CAAC,EACrE,CDfO,IAAMC,EAASC,EAAkB,CACtC,KAAM,SACN,cAAeC,EACZ,OAAO,CAMN,UAAWA,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,EAS3C,sBAAuBA,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAI,EAM1D,OAAQA,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAK,EAQ5C,QAASA,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAK,EAM7C,MAAOA,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAK,CAC7C,CAAC,EACA,SAAS,EACT,QAAQ,CAAC,CAAC,EACb,MAAO,CAAC,CAAE,QAAAC,CAAQ,KACT,CACL,MAAO,CACL,mBAAoB,CAAC,CAAE,IAAAC,EAAK,MAAAC,CAAM,IAAM,CACtC,IAAMC,EAAQ,CAAC,aAAc,gBAAgB,EACzCH,GAAS,WACXG,EAAM,KAAK,UAAUH,EAAQ,SAAS,EAAE,EAGtCA,GAAS,uBACXG,EAAM,KAAK,YAAY,EAGrBH,GAAS,QACXG,EAAM,KAAK,cAAc,EAGvBH,GAAS,SACXG,EAAM,KAAK,WAAW,EAGxB,IAAMC,EAAQF,EAAM,IAAI,CAAC,CAAE,SAAAG,CAAS,IAAM,CACxC,IAAMC,EAAQ,CAACL,EAAI,SAAUI,CAAQ,EACrC,OAAIA,EAAS,WAAW,KAAK,EAC3BC,EAAM,CAAC,EAAI,GAAGD,EAAS,MAAM,EAAG,EAAE,CAAC,QAEnCC,EAAM,KAAK,YAAY,EAGlBC,EAAQ,GAAGD,CAAK,CACzB,CAAC,EAED,QAAQ,IACNE,EACG,QAAQ,EACR,MAAM,8CAA8C,CACzD,EAEA,IAAMC,EAAU,WAAWL,EAAM,KAAK,GAAG,CAAC,IAAID,EAAM,KAAK,GAAG,CAAC,GAC7D,GAAIH,GAAS,MAAO,CAClB,QAAQ,IACNQ,EAAM,IAAIE,EAAe,CAAC,EAC1BF,EAAM,MAAM,iBAAiB,CAC/B,EAEA,QAAWG,KAAQP,EACjB,QAAQ,IACNI,EAAM,IAAIE,EAAe,CAAC,EAC1BF,EAAM,MAAM,QAAG,EACfG,EAAK,QAAQV,EAAI,SAAU,EAAE,CAC/B,EAEA,QAAQ,IACNO,EAAM,IAAIE,EAAe,CAAC,EAC1BF,EAAM,MAAM,gBAAM,EAClBA,EAAM,IAAIG,CAAI,CAChB,CAEJ,CAEA,GAAI,CACF,IAAMC,EAASC,EAASJ,EAAS,CAAE,MAAO,MAAO,CAAC,EAC5CK,EAAaC,EAAgBH,EAAO,SAAS,CAAC,EAEpD,QAAQ,IACNJ,EAAM,IAAIE,EAAe,CAAC,EAC1BF,EAAM,MACJ,+CAA0CM,CAAU,EACtD,EACA;AAAA,CACF,CACF,OAASE,EAAK,CACZ,QAAQ,MACNR,EAAM,MAAM,mCAAmCQ,CAAG,EAAE,CACtD,CACF,CACF,CACF,CACF,EAEJ,CAAC","names":["defineIntegration","z","execSync","resolve","kleur","getTotalSavings","output","pattern","getCurrentTime","now","subset","defineIntegration","z","options","dir","pages","flags","input","pathname","parts","resolve","kleur","command","getCurrentTime","page","output","execSync","bytesSaved","getTotalSavings","err"]}