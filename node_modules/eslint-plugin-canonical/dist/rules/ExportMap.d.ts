export default class ExportMap {
    constructor(path: any);
    get hasDefault(): boolean;
    get size(): any;
    /**
     * Note that this does not check explicitly re-exported names for existence
     * in the base namespace, but it will expand all `export * from '...'` exports
     * if not found in the explicit namespace.
     * @param  {string}  name
     * @return {Boolean} true if `name` is exported by this module.
     */
    has(name: any): boolean;
    /**
     * ensure that imported name fully resolves.
     * @param  {string} name
     * @return {{ found: boolean, path: ExportMap[] }}
     */
    hasDeep(name: any): any;
    get(name: any): any;
    forEach(callback: any, thisArg: any): void;
    reportErrors(context: any, declaration: any): void;
}
/**
 * Traverse a pattern/identifier node, calling 'callback'
 * for each leaf identifier.
 * @param  {node}   pattern
 * @param  {Function} callback
 * @return {void}
 */
export declare function recursivePatternCapture(pattern: any, callback: any): void;
