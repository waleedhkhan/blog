---
import { Icon } from "astro-icon/components";
import NavigationItem from "@/components/vue/NavigationItem.vue";
import CommandMenu from "@/components/vue/CommandMenu.vue";
import ThemeSwitcher from "./ThemeSwitcher.astro";

interface Props {
  posts: { title: string; href: string }[];
}

const links = [
  {
    href: "/",
    label: "Home",
    icon: "lucide:home",
  },
  {
    href: "/posts",
    label: "Blog",
    icon: "lucide:newspaper",
  },
  {
    href: "/about",
    label: "About",
    icon: "lucide:user",
  },
  {
    href: "/bookmarks",
    label: "Bookmarks",
    icon: "lucide:bookmark",
  },
];

const currentPath = Astro.url.pathname;
const { posts } = Astro.props;
---

<nav class="flat-nav fixed bottom-8 left-1/2 -translate-x-1/2 z-50 px-6 py-3 rounded-sm flex items-center shadow-md bg-white/90 dark:bg-stone-900/90 backdrop-blur-md border border-gray-200 dark:border-gray-800">
  {
    links.map((link, idx) => (
      <NavigationItem
        label={link.label.toLowerCase()}
        className={`nav-item bauhaus-focus-ring ${currentPath.match(`${link.href}/.?`) || currentPath === link.href ? "active-link" : ""}`.trim()}
        href={link.href}
        client:load
      >
        <Icon name={link.icon} aria-label={link.label} class="h-auto w-4 nav-icon" />
      </NavigationItem>
    ))
  }

  <div class="nav-divider mx-2"></div>

  <ThemeSwitcher />

</nav>

<style>
  .flat-nav {
    --nav-bg: rgba(255, 255, 255, 0.85);
    --nav-border: rgba(0, 0, 0, 0.08);
    --nav-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    
    background-color: var(--nav-bg);
    border: 1px solid var(--nav-border);
    box-shadow: var(--nav-shadow);
    transition: all 0.3s ease;
  }
  
  :global(.dark) .flat-nav {
    --nav-bg: rgba(28, 28, 30, 0.85);
    --nav-border: rgba(255, 255, 255, 0.08);
    --nav-shadow: 0 2px 8px rgba(0, 0, 0, 0.16);
  }
  
  .active-link {
    position: relative;
  }
  
  .active-link::after {
    content: "";
    position: absolute;
    bottom: -0.5rem;
    left: 50%;
    transform: translateX(-50%);
    width: 4px;
    height: 4px;
    background-color: currentColor;
    border-radius: 0;
  }
  
  :global(.nav-item) {
    letter-spacing: -0.02em;
    font-weight: 450;
    text-transform: lowercase;
  }
  
  :global(.nav-icon) {
    stroke-width: 1.5px;
    transition: transform 0.2s ease;
  }
  
  :global(.nav-item:hover .nav-icon) {
    transform: translateY(-1px);
  }
</style>

<script>
  import confetti from 'canvas-confetti';
  
  document.getElementById('confettiButton')?.addEventListener('click', () => {
    confetti({
      particleCount: 100,
      spread: 70,
      origin: { y: 0.6 }
    });
  });

  // Improved ripple effect for navigation items
  document.addEventListener('DOMContentLoaded', () => {
    const navItems = document.querySelectorAll('.nav-item');
    
    navItems.forEach(item => {
      item.addEventListener('click', function(e) {
        // Prevent multiple ripples on quick clicks
        const existingRipple = item.querySelector('.nav-ripple');
        if (existingRipple) {
          existingRipple.remove();
        }
        
        // Get accurate position relative to the item
        const rect = item.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        // Create ripple element with proper class for easier cleanup
        const ripple = document.createElement('span');
        ripple.className = 'nav-ripple';
        ripple.style.cssText = `
          position: absolute;
          top: ${y}px;
          left: ${x}px;
          transform: translate(-50%, -50%);
          width: 0;
          height: 0;
          background-color: rgba(0, 0, 0, 0.05);
          border-radius: 50%;
          opacity: 0.6;
          pointer-events: none;
          z-index: 0;
        `;
        
        // Dark mode ripple - use more subtle opacity
        if (document.documentElement.classList.contains('dark')) {
          ripple.style.backgroundColor = 'rgba(255, 255, 255, 0.05)';
        }
        
        item.appendChild(ripple);
        
        // Use microtask to ensure animation runs smoothly
        queueMicrotask(() => {
          // Use smaller ripple size to avoid overflow issues
          ripple.style.width = '120px';
          ripple.style.height = '120px';
          ripple.style.opacity = '0';
          ripple.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
          
          // Clean up ripple after animation completes
          setTimeout(() => {
            if (ripple.parentElement === item) {
              item.removeChild(ripple);
            }
          }, 400);
        });
      });
    });
  });
</script>
