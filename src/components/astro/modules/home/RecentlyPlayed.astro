---
export const prerender = false; // Disable static generation
export const partial = false;   // Ensure full server-side rendering

interface Track {
  name: string;
  artist: string;
  url: string;
  image: string;
}

// Cache the results for 5 minutes to avoid hitting Last.fm API too frequently
let cachedTracks: Track[] | null = null;
let lastFetch = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes in milliseconds

async function getRecentTracks(): Promise<Track[]> {
  // Return cached results if available and fresh
  if (cachedTracks && (Date.now() - lastFetch < CACHE_DURATION)) {
    return cachedTracks;
  }

  try {
    const LASTFM_API_KEY = import.meta.env.LASTFM_API_KEY;
    const LASTFM_USERNAME = 'waleedhkhan';

    if (!LASTFM_API_KEY) {
      throw new Error('LastFM API key is not configured');
    }

    const response = await fetch(
      `https://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=${LASTFM_USERNAME}&api_key=${LASTFM_API_KEY}&format=json&limit=6`,
      {
        headers: {
          'Accept': 'application/json',
        },
        // Add caching headers
        cache: 'no-cache'
      }
    );

    if (!response.ok) {
      throw new Error(`API request failed: ${await response.text()}`);
    }

    const data = await response.json();
    
    if (!data?.recenttracks?.track) {
      throw new Error('Unexpected API response structure');
    }

    const tracks = data.recenttracks.track.map((track: any) => ({
      name: track.name || 'Unknown Track',
      artist: track.artist?.['#text'] || 'Unknown Artist',
      url: track.url || '#',
      image: track.image?.[2]?.['#text'] || 'https://via.placeholder.com/64'
    }));

    // Update cache
    cachedTracks = tracks;
    lastFetch = Date.now();

    return tracks;
  } catch (error) {
    console.error('Error fetching LastFM data:', error);
    return cachedTracks || []; // Return cached data on error, or empty array if no cache
  }
}

const initialRecentTracks = await getRecentTracks();
---

<div id="recently-played" class="space-y-4" data-tracks={JSON.stringify(initialRecentTracks)}>
  <div id="tracks-container">
    {initialRecentTracks.length > 0 ? (
      <ul class=":uno: grid grid-cols-2 gap-4">
        {initialRecentTracks.map((track, index) => (
          <li>
            <a
              class=":uno: group flex items-center gap-3 rounded-lg p-2 transition-colors hover:bg-zinc-100 dark:hover:bg-zinc-800"
              href={track.url}
              target="_blank"
              rel="noopener noreferrer"
              data-track-index={index}
            >
              <div class="album-art-container">
                <div class="album-visualizer">
                  <span></span>
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
                <img
                  src={track.image}
                  alt={`${track.name} album art`}
                  class=":uno: album-art h-12 w-12 rounded-md transition-all"
                  loading="lazy"
                  data-artist={track.artist}
                  data-track={track.name}
                />
                <div class="album-reflection"></div>
                <div class="album-glow"></div>
              </div>
              <div class=":uno: flex-1 overflow-hidden">
                <p class=":uno: truncate text-sm font-medium text-zinc-900 dark:text-zinc-100 track-name">
                  {track.name}
                </p>
                <p class=":uno: truncate text-xs text-zinc-500 dark:text-zinc-400 track-artist">
                  {track.artist}
                </p>
              </div>
            </a>
          </li>
        ))}
      </ul>
    ) : (
      <p class=":uno: text-sm text-zinc-500 dark:text-zinc-400">
        No recently played tracks available
      </p>
    )}
  </div>
</div>

<style>
  /* Animation keyframes with vendor prefixes */
  @-webkit-keyframes spin {
    from { -webkit-transform: rotate(0deg) scale(1.1); transform: rotate(0deg) scale(1.1); }
    to { -webkit-transform: rotate(360deg) scale(1.1); transform: rotate(360deg) scale(1.1); }
  }
  
  @keyframes spin {
    from { -webkit-transform: rotate(0deg) scale(1.1); transform: rotate(0deg) scale(1.1); }
    to { -webkit-transform: rotate(360deg) scale(1.1); transform: rotate(360deg) scale(1.1); }
  }
  
  @-webkit-keyframes pulse {
    0% { -webkit-transform: scale(1); transform: scale(1); }
    50% { -webkit-transform: scale(1.05); transform: scale(1.05); -webkit-box-shadow: 0 0 15px 2px rgba(255, 255, 255, 0.5); box-shadow: 0 0 15px 2px rgba(255, 255, 255, 0.5); }
    100% { -webkit-transform: scale(1); transform: scale(1); }
  }
  
  @keyframes pulse {
    0% { -webkit-transform: scale(1); transform: scale(1); }
    50% { -webkit-transform: scale(1.05); transform: scale(1.05); -webkit-box-shadow: 0 0 15px 2px rgba(255, 255, 255, 0.5); box-shadow: 0 0 15px 2px rgba(255, 255, 255, 0.5); }
    100% { -webkit-transform: scale(1); transform: scale(1); }
  }
  
  @-webkit-keyframes float {
    0% { -webkit-transform: translateY(0px); transform: translateY(0px); }
    50% { -webkit-transform: translateY(-5px); transform: translateY(-5px); }
    100% { -webkit-transform: translateY(0px); transform: translateY(0px); }
  }
  
  @keyframes float {
    0% { -webkit-transform: translateY(0px); transform: translateY(0px); }
    50% { -webkit-transform: translateY(-5px); transform: translateY(-5px); }
    100% { -webkit-transform: translateY(0px); transform: translateY(0px); }
  }
  
  @-webkit-keyframes visualize {
    0% { height: 5px; }
    50% { height: 12px; }
    100% { height: 5px; }
  }
  
  @keyframes visualize {
    0% { height: 5px; }
    50% { height: 12px; }
    100% { height: 5px; }
  }
  
  @-webkit-keyframes shimmer {
    0% { background-position: -100% 0; }
    100% { background-position: 200% 0; }
  }
  
  @keyframes shimmer {
    0% { background-position: -100% 0; }
    100% { background-position: 200% 0; }
  }

  .album-art-container {
    position: relative;
    width: 3rem;
    height: 3rem;
    -webkit-perspective: 1000px;
    perspective: 1000px;
    overflow: visible;
    -webkit-transition: transform 0.3s ease;
    transition: transform 0.3s ease;
  }

  .album-art {
    width: 100%;
    height: 100%;
    -o-object-fit: cover;
    object-fit: cover;
    -webkit-transform-style: preserve-3d;
    transform-style: preserve-3d;
    -webkit-transition: transform 0.5s ease, box-shadow 0.3s ease, border-radius 0.5s ease;
    transition: transform 0.5s ease, box-shadow 0.3s ease, border-radius 0.5s ease;
    -webkit-box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    z-index: 2;
    position: relative;
  }

  .album-reflection {
    position: absolute;
    bottom: -12px;
    left: 5%;
    width: 90%;
    height: 6px;
    background: -webkit-radial-gradient(center, ellipse, rgba(255,255,255,0.4) 0%, rgba(255,255,255,0) 70%);
    background: radial-gradient(ellipse at center, rgba(255,255,255,0.4) 0%, rgba(255,255,255,0) 70%);
    border-radius: 50%;
    -webkit-transform: scaleY(0);
    transform: scaleY(0);
    opacity: 0;
    -webkit-transform-origin: center top;
    transform-origin: center top;
    -webkit-transition: transform 0.3s ease, opacity 0.3s ease;
    transition: transform 0.3s ease, opacity 0.3s ease;
    -webkit-filter: blur(1px);
    filter: blur(1px);
    z-index: 1;
  }
  
  .album-glow {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 8px;
    -webkit-box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);
    box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);
    opacity: 0;
    z-index: 0;
    -webkit-transition: box-shadow 0.5s ease, opacity 0.5s ease;
    transition: box-shadow 0.5s ease, opacity 0.5s ease;
  }

  .album-art-container:hover .album-art {
    -webkit-transform: translateY(-15%) scale(1.15) rotate(5deg);
    transform: translateY(-15%) scale(1.15) rotate(5deg);
    -webkit-box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.2), 0 10px 10px -5px rgba(0, 0, 0, 0.1);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.2), 0 10px 10px -5px rgba(0, 0, 0, 0.1);
  }

  .album-art-container:hover .album-reflection {
    -webkit-transform: scaleY(1);
    transform: scaleY(1);
    opacity: 1;
  }
  
  .album-art-container:hover .album-glow {
    -webkit-box-shadow: 0 0 20px 5px rgba(255, 255, 255, 0.3);
    box-shadow: 0 0 20px 5px rgba(255, 255, 255, 0.3);
    opacity: 1;
  }
  
  .album-art-container:hover .track-name {
    color: #3b82f6; /* blue-500 */
    -webkit-transition: color 0.3s ease;
    transition: color 0.3s ease;
  }

  .album-art.playing {
    -webkit-animation: spin 7s linear infinite;
    animation: spin 7s linear infinite;
    border-radius: 50%;
    -webkit-box-shadow: 0 0 20px 5px rgba(59, 130, 246, 0.5);
    box-shadow: 0 0 20px 5px rgba(59, 130, 246, 0.5); /* blue glow */
  }
  
  .album-art.pulse {
    -webkit-animation: pulse 2s infinite ease-in-out;
    animation: pulse 2s infinite ease-in-out;
  }
  
  /* Music visualizer effect */
  .album-visualizer {
    position: absolute;
    bottom: -5px;
    left: 50%;
    -webkit-transform: translateX(-50%);
    transform: translateX(-50%);
    width: 100%;
    height: 10px;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
    -webkit-box-align: end;
    -ms-flex-align: end;
    align-items: flex-end;
    gap: 2px;
    opacity: 0;
    -webkit-transition: opacity 0.3s ease;
    transition: opacity 0.3s ease;
    z-index: 3;
  }
  
  .album-art-container:hover .album-visualizer,
  .album-art.playing ~ .album-visualizer {
    opacity: 1;
  }
  
  .album-visualizer span {
    display: inline-block;
    width: 3px;
    height: 5px;
    background: #3b82f6; /* blue-500 */
    border-radius: 1px;
    -webkit-transition: height 0.2s ease;
    transition: height 0.2s ease;
  }
  
  .album-art.playing ~ .album-visualizer span {
    -webkit-animation: visualize 0.8s infinite ease;
    animation: visualize 0.8s infinite ease;
  }
  
  .album-visualizer span:nth-child(1) { -webkit-animation-delay: 0s; animation-delay: 0s; }
  .album-visualizer span:nth-child(2) { -webkit-animation-delay: 0.2s; animation-delay: 0.2s; }
  .album-visualizer span:nth-child(3) { -webkit-animation-delay: 0.4s; animation-delay: 0.4s; }
  .album-visualizer span:nth-child(4) { -webkit-animation-delay: 0.6s; animation-delay: 0.6s; }
  
  .track-name.shimmer {
    background: -webkit-linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.5) 50%, rgba(255,255,255,0) 100%);
    background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.5) 50%, rgba(255,255,255,0) 100%);
    background-size: 200% 100%;
    -webkit-animation: shimmer 2s infinite;
    animation: shimmer 2s infinite;
    -webkit-background-clip: text;
    background-clip: text;
  }
  
  .album-art-container.float {
    -webkit-animation: float 3s ease-in-out infinite;
    animation: float 3s ease-in-out infinite;
  }
</style>

<script is:inline define:vars={{ initialTracks: initialRecentTracks }}>
  // Immediately execute the script once it's loaded
  (function() {
    // Function to safely apply animations across browsers
    function applyAnimation(element, animationClass) {
      if (element) {
        // Force browser reflow to ensure animation applies
        void element.offsetWidth;
        element.classList.add(animationClass);
      }
    }

    // Function to fetch recently played tracks from API
    async function fetchRecentTracks() {
      try {
        const response = await fetch('/api/recently-played');
        if (!response.ok) {
          throw new Error('Failed to fetch tracks');
        }
        return await response.json();
      } catch (error) {
        return [];
      }
    }

    // Function to render tracks to the container
    function renderTracks(tracks) {
      const container = document.getElementById('tracks-container');
      if (!container) {
        return;
      }
      
      if (!tracks || !tracks.length) {
        container.innerHTML = `<p class="text-sm text-zinc-500 dark:text-zinc-400">No recently played tracks available</p>`;
        return;
      }

      const tracksList = `
        <ul class="grid grid-cols-2 gap-4">
          ${tracks.map((track, index) => `
            <li>
              <a
                class="group flex items-center gap-3 rounded-lg p-2 transition-colors hover:bg-zinc-100 dark:hover:bg-zinc-800"
                href="${track.url}"
                target="_blank"
                rel="noopener noreferrer"
                data-track-index="${index}"
              >
                <div class="album-art-container${index === 0 ? ' float' : ''}">
                  <div class="album-visualizer">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                  <img
                    src="${track.image}"
                    alt="${track.name} album art"
                    class="album-art h-12 w-12 rounded-md transition-all${index === 0 ? ' pulse' : ''}"
                    loading="lazy"
                    data-artist="${track.artist}"
                    data-track="${track.name}"
                  />
                  <div class="album-reflection"></div>
                  <div class="album-glow"></div>
                </div>
                <div class="flex-1 overflow-hidden">
                  <p class="truncate text-sm font-medium text-zinc-900 dark:text-zinc-100 track-name${index === 0 ? ' shimmer' : ''}">
                    ${track.name}
                  </p>
                  <p class="truncate text-xs text-zinc-500 dark:text-zinc-400 track-artist">
                    ${track.artist}
                  </p>
                </div>
              </a>
            </li>
          `).join('')}
        </ul>
      `;
      
      // Use innerHTML for bulk update
      container.innerHTML = tracksList;
      
      // Apply effects after the DOM is updated
      setTimeout(() => applyAlbumArtEffects(), 100);
    }
    
    // Cross-browser compatible way to create a keyframe animation
    function createKeyframeStyle(name, css) {
      // Check if the style already exists
      const existingStyle = document.getElementById(`keyframe-${name}`);
      if (existingStyle) {
        return;
      }
      
      const style = document.createElement('style');
      style.id = `keyframe-${name}`;
      style.textContent = css;
      document.head.appendChild(style);
    }
    
    // Function to apply interactive effects to album art
    function applyAlbumArtEffects() {
      const albumArts = document.querySelectorAll('.album-art');
      
      // Create ripple keyframe if needed
      createKeyframeStyle('ripple', `
        @keyframes ripple {
          to {
            width: 150%;
            height: 150%;
            opacity: 0;
          }
        }
        @-webkit-keyframes ripple {
          to {
            width: 150%;
            height: 150%;
            opacity: 0;
          }
        }
      `);
      
      // Apply effects to each album art
      albumArts.forEach((art, index) => {
        // For reliable effects, use setTimeout to stagger animations
        if (index === 0) {
          setTimeout(() => {
            applyAnimation(art, 'pulse');
            applyAnimation(art.parentElement, 'float');
            const trackName = art.parentElement.parentElement.querySelector('.track-name');
            if (trackName) applyAnimation(trackName, 'shimmer');
          }, 50);
        }
        
        // Add click handlers
        art.addEventListener('click', function(e) {
          e.stopPropagation();
          e.preventDefault();
          
          this.classList.toggle('playing');
          
          // Create an expanding ripple effect with inline styles for better compatibility
          const ripple = document.createElement('div');
          Object.assign(ripple.style, {
            position: 'absolute',
            width: '10px',
            height: '10px',
            borderRadius: '50%',
            backgroundColor: 'rgba(59, 130, 246, 0.6)',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            animation: 'ripple 0.6s linear',
            webkitAnimation: 'ripple 0.6s linear',
            zIndex: '5'
          });
          
          this.parentElement.appendChild(ripple);
          
          // Clean up after animation
          setTimeout(() => {
            if (ripple.parentNode) {
              ripple.parentNode.removeChild(ripple);
            }
          }, 600);
          
          createParticles(this.parentElement);
          return false;
        });
        
        // Mouse move effect for depth
        art.parentElement.addEventListener('mousemove', function(e) {
          const rect = this.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;
          
          const tiltX = ((y / rect.height) * 30 - 15).toFixed(2);
          const tiltY = (-(x / rect.width) * 30 + 15).toFixed(2);
          
          art.style.transform = `perspective(500px) rotateX(${tiltX}deg) rotateY(${tiltY}deg) scale(1.1)`;
          art.style.webkitTransform = `perspective(500px) rotateX(${tiltX}deg) rotateY(${tiltY}deg) scale(1.1)`;
          
          const reflection = this.querySelector('.album-reflection');
          if (reflection) {
            reflection.style.transform = `scaleY(1) translateX(${(x / rect.width - 0.5) * 10}px)`;
            reflection.style.webkitTransform = `scaleY(1) translateX(${(x / rect.width - 0.5) * 10}px)`;
          }
          
          const visualizerBars = this.querySelectorAll('.album-visualizer span');
          visualizerBars.forEach((bar, i) => {
            const height = 5 + Math.sin((x / rect.width) * Math.PI + i) * 8;
            bar.style.height = `${Math.max(3, height)}px`;
          });
        });
        
        art.parentElement.addEventListener('mouseleave', function() {
          art.style.transform = '';
          art.style.webkitTransform = '';
          
          const reflection = this.querySelector('.album-reflection');
          if (reflection) {
            reflection.style.transform = '';
            reflection.style.webkitTransform = '';
          }
          
          const visualizerBars = this.querySelectorAll('.album-visualizer span');
          visualizerBars.forEach(bar => {
            bar.style.height = '5px';
          });
        });
      });
    }
    
    // Function to create particle burst effect with browser compatibility
    function createParticles(container) {
      // Skip if not supported
      if (!container) return;
      
      const particleCount = 12; // Reduced for better performance
      const colors = ['#3b82f6', '#60a5fa', '#93c5fd', '#bfdbfe', '#ffffff'];
      
      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        const size = Math.random() * 6 + 2;
        
        Object.assign(particle.style, {
          position: 'absolute',
          width: `${size}px`,
          height: `${size}px`,
          backgroundColor: colors[Math.floor(Math.random() * colors.length)],
          borderRadius: '50%',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          webkitTransform: 'translate(-50%, -50%)',
          zIndex: '4',
          opacity: (Math.random() * 0.5 + 0.5).toString()
        });
        
        container.appendChild(particle);
        
        const angle = Math.random() * Math.PI * 2;
        const speed = Math.random() * 80 + 40; // Reduced speed for better performance
        const startTime = Date.now();
        const duration = Math.random() * 500 + 300; // Reduced duration
        
        // Use a more efficient animation approach
        const animateParticle = () => {
          const elapsed = Date.now() - startTime;
          const progress = elapsed / duration;
          
          if (progress >= 1) {
            if (particle.parentNode) {
              particle.parentNode.removeChild(particle);
            }
            return;
          }
          
          const easing = 1 - Math.pow(1 - progress, 3);
          const distance = speed * easing;
          const x = Math.cos(angle) * distance;
          const y = Math.sin(angle) * distance - (40 * Math.pow(progress, 2));
          
          particle.style.transform = `translate(calc(-50% + ${x}px), calc(-50% + ${y}px))`;
          particle.style.webkitTransform = `translate(calc(-50% + ${x}px), calc(-50% + ${y}px))`;
          particle.style.opacity = (1 - easing).toString();
          
          requestAnimationFrame(animateParticle);
        };
        
        requestAnimationFrame(animateParticle);
      }
    }

    // Setup auto refresh with better error handling
    let autoRefreshTimer = null;
    
    function startAutoRefresh() {
      if (autoRefreshTimer) {
        clearInterval(autoRefreshTimer);
      }
      
      // Define the refresh function
      const refreshData = async () => {
        try {
          const tracks = await fetchRecentTracks();
          if (tracks && tracks.length > 0) {
            renderTracks(tracks);
          }
        } catch (err) {
          // Error handled silently
        }
      };
      
      // Start the periodic refresh
      autoRefreshTimer = setInterval(refreshData, 60000);
      
      // Also trigger an immediate refresh
      refreshData();
    }
    
    // Ensure the script runs once the page is fully loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        applyAlbumArtEffects();
        startAutoRefresh();
      });
    } else {
      // DOM already loaded
      applyAlbumArtEffects();
      startAutoRefresh();
    }
    
    // Handle page visibility
    document.addEventListener('visibilitychange', function() {
      if (document.visibilityState === 'visible') {
        startAutoRefresh();
      } else {
        if (autoRefreshTimer) {
          clearInterval(autoRefreshTimer);
          autoRefreshTimer = null;
        }
      }
    });
    
    // Clean up
    window.addEventListener('beforeunload', () => {
      if (autoRefreshTimer) {
        clearInterval(autoRefreshTimer);
      }
    });
  })();
</script>
