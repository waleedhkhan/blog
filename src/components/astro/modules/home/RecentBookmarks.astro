---
import { Icon } from "astro-icon/components";
import bookmarksData from "@/data/bookmarks.json";
import AppLink from "@/components/astro/ui/AppLink.astro";

// Define proper types for our bookmarks
interface BaseBookmark {
  name: string;
  url: string;
  description: string;
  date?: string;
  timestamp?: string;
}

interface StringCategoryBookmark extends BaseBookmark {
  category: string;
}

interface ArrayCategoryBookmark extends BaseBookmark {
  category: string[];
}

type Bookmark = StringCategoryBookmark | ArrayCategoryBookmark;

// Extended bookmark with processed properties
interface ProcessedBookmark extends BaseBookmark {
  id?: string;
  category: string | string[];
  formattedDate: string;
  dateTimestamp: number;
  processedCategories: string[];
  timestamp?: string;
  status?: string;
}

// Category colors - limited, minimal palette aligned with Bauhaus principles
const categoryColors: Record<string, { bg: string, text: string, special?: boolean }> = {
  "uncategorized": { bg: "bg-neutral-200 dark:bg-neutral-700", text: "text-neutral-800 dark:text-neutral-200" },
  "article": { bg: "bg-blue-200 dark:bg-blue-800", text: "text-blue-800 dark:text-blue-200" },
  "articles": { bg: "bg-blue-200 dark:bg-blue-800", text: "text-blue-800 dark:text-blue-200" },
  "tools": { bg: "bg-amber-200 dark:bg-amber-800", text: "text-amber-800 dark:text-amber-200" },
  "design": { bg: "bg-rose-200 dark:bg-rose-800", text: "text-rose-800 dark:text-rose-200" },
  "development": { bg: "bg-emerald-200 dark:bg-emerald-800", text: "text-emerald-800 dark:text-emerald-200" },
  "productivity": { bg: "bg-purple-200 dark:bg-purple-800", text: "text-purple-800 dark:text-purple-200" },
  "books": { bg: "bg-orange-200 dark:bg-orange-800", text: "text-orange-800 dark:text-orange-200" },
  "videos": { bg: "bg-indigo-200 dark:bg-indigo-800", text: "text-indigo-800 dark:text-indigo-200" },
  "ai": { bg: "ai-gradient", text: "text-white dark:text-white", special: true }
};

// Get color for a category, with fallback to uncategorized
function getCategoryColor(category: string) {
  const lowerCategory = category.toLowerCase();
  return categoryColors[lowerCategory] || categoryColors["uncategorized"];
}

// Format date function
function formatDate(dateString: string | undefined): string {
  if (!dateString) return "";
  
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return ""; // Invalid date
  
  return new Intl.DateTimeFormat('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  }).format(date);
}

// Convert string to date for sorting
function dateToTimestamp(dateString: string | undefined, timestampString: string | undefined): number {
  // First check if timestamp exists (most precise)
  if (timestampString) {
    const timestamp = new Date(timestampString);
    return isNaN(timestamp.getTime()) ? 0 : timestamp.getTime();
  }
  
  // Fall back to date if timestamp isn't available
  if (dateString) {
    const date = new Date(dateString);
    return isNaN(date.getTime()) ? 0 : date.getTime();
  }
  
  return 0; // No date means oldest
}

// Process bookmarks
let processedBookmarks = bookmarksData.bookmarks.map((bookmark) => {
  // Create a new object with all properties from the original bookmark
  const processed = { ...bookmark } as ProcessedBookmark;
  
  // Format the date if it exists
  if (processed.date) {
    processed.formattedDate = formatDate(processed.date);
  } else if (processed.timestamp) {
    processed.formattedDate = formatDate(processed.timestamp);
  } else {
    processed.formattedDate = "";
  }
  
  // Get timestamp for sorting (using timestamp field first if available, then date field)
  processed.dateTimestamp = dateToTimestamp(processed.date, processed.timestamp);
  
  // Process categories
  let categories: string[] = [];
  if (typeof processed.category === 'string') {
    categories = processed.category.split(',').map(cat => cat.trim());
  } else if (Array.isArray(processed.category)) {
    categories = processed.category.map(String);
  }
  processed.processedCategories = categories;
  
  return processed;
});

// Sort by newest first and take only the 5 most recent bookmarks
processedBookmarks.sort((a, b) => b.dateTimestamp - a.dateTimestamp);
const recentBookmarks = processedBookmarks.slice(0, 5);
---

<div class="space-y-6">
  <div class=":uno: grid grid-cols-1 gap-4">
    {recentBookmarks.map((bookmark) => (
      <a 
        href={bookmark.url} 
        target="_blank" 
        rel="noopener noreferrer" 
        class=":uno: block p-4 bg-neutral-100 dark:bg-neutral-800 rounded-sm hover:bg-neutral-50 dark:hover:bg-neutral-700 transition-colors duration-200 border border-gray-200 dark:border-gray-900"
        data-url={bookmark.url}
        transition:name={`bookmark-${bookmark.url.replace(/[^a-zA-Z0-9]/g, '-')}`}
      >
        <div class=":uno: flex flex-col gap-2">
          <h3 class=":uno: text-gray-900 dark:text-gray-300 font-medium text-base lowercase">
            {bookmark.name}
            <Icon name="lucide:external-link" class=":uno: h-3 w-3 ml-1 inline-flex text-gray-400 dark:text-gray-600" />
          </h3>
          
          {bookmark.description && (
            <p class=":uno: text-sm text-gray-700 dark:text-gray-500 line-clamp-2">
              {bookmark.description}
            </p>
          )}
          
          <div class=":uno: flex flex-wrap justify-between items-center mt-1">
            <div class=":uno: flex flex-wrap gap-1.5">
              {bookmark.processedCategories.map(category => {
                const colorInfo = getCategoryColor(category);
                const isSpecial = colorInfo.special;
                return (
                  <span class={`px-2 py-0.5 text-xs font-medium rounded whitespace-nowrap ${isSpecial ? 'ai-tag' : `${colorInfo.bg} ${colorInfo.text}`}`}>
                    {category.toLowerCase()}
                  </span>
                );
              })}
            </div>
            
            {bookmark.formattedDate && (
              <time class=":uno: text-xs text-gray-600 dark:text-gray-400 mt-2 sm:mt-0 w-full sm:w-auto sm:ml-auto">
                {bookmark.formattedDate}
              </time>
            )}
          </div>
        </div>
      </a>
    ))}
  </div>
  
  <div class=":uno: flex justify-end">
    <AppLink
      class=":uno: mt-4 inline-flex items-center justify-center w-auto h-auto px-3 py-2 rounded-sm bauhaus-button bg-neutral-100 dark:bg-neutral-800 hover:bg-neutral-50 dark:hover:bg-neutral-700 transition-all duration-200 group relative text-sm"
      href="/bookmarks"
      aria-label="See all bookmarks"
    >
      <span class=":uno: font-normal bauhaus-mono lowercase">all bookmarks</span>
      <Icon name="lucide:arrow-right" class=":uno: w-4 h-4 ml-1 text-gray-700 dark:text-gray-300" />
    </AppLink>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize visited bookmarks from localStorage
    const visitedBookmarks = new Set(
      JSON.parse(localStorage.getItem('visitedBookmarks') || '[]')
    );
    
    // Apply visited styles
    const bookmarkLinks = document.querySelectorAll('a[data-url]');
    bookmarkLinks.forEach(link => {
      const url = link.getAttribute('data-url');
      if (url && visitedBookmarks.has(url)) {
        link.classList.add('visited');
      }
      
      // Mark bookmarks as visited when clicked
      link.addEventListener('click', () => {
        const url = link.getAttribute('data-url');
        if (url) {
          visitedBookmarks.add(url);
          localStorage.setItem('visitedBookmarks', JSON.stringify([...visitedBookmarks]));
          
          if (!link.classList.contains('visited')) {
            link.classList.add('visited');
          }
        }
      });
    });
  });
</script>

<style is:global>
  /* Minimal bookmark styling */
  a[data-url].visited {
    opacity: 0.7;
  }
  
  /* Line clamp for descriptions */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Special AI tag styling */
  .ai-tag {
    background: linear-gradient(90deg, #991b1b, #b91c1c, #ef4444, #b91c1c, #991b1b);
    background-size: 200% 100%;
    color: white;
    position: relative;
    animation: gradient-shift 3s ease infinite;
    box-shadow: 0 0 8px rgba(220, 38, 38, 0.5);
    transition: all 0.3s ease;
  }
  
  .ai-tag:hover {
    box-shadow: 0 0 12px rgba(220, 38, 38, 0.8);
  }
  
  @keyframes gradient-shift {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
</style>
