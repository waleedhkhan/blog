---
import { Icon } from "astro-icon/components";
import bookmarksData from "@/data/bookmarks.json";
import AppLink from "@/components/astro/ui/AppLink.astro";

// Define proper types for our bookmarks
interface BaseBookmark {
  name: string;
  url: string;
  description: string;
  date?: string;
}

interface StringCategoryBookmark extends BaseBookmark {
  category: string;
}

interface ArrayCategoryBookmark extends BaseBookmark {
  category: string[];
}

type Bookmark = StringCategoryBookmark | ArrayCategoryBookmark;

// Extended bookmark with processed properties
interface ProcessedBookmark extends BaseBookmark {
  id?: string;
  category: string | string[];
  formattedDate: string;
  dateTimestamp: number;
  processedCategories: string[];
  timestamp?: string;
  status?: string;
}

// Format date function
function formatDate(dateString: string | undefined): string {
  if (!dateString) return "";
  
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return ""; // Invalid date
  
  return new Intl.DateTimeFormat('en-US', { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric' 
  }).format(date);
}

// Convert string to date for sorting
function dateToTimestamp(dateString: string | undefined): number {
  if (!dateString) return 0; // No date means oldest
  const date = new Date(dateString);
  return isNaN(date.getTime()) ? 0 : date.getTime();
}

// Process bookmarks
let processedBookmarks = bookmarksData.bookmarks.map((bookmark) => {
  // Create a new object with all properties from the original bookmark
  const processed = { ...bookmark } as ProcessedBookmark;
  
  // Format the date if it exists
  if (processed.date) {
    processed.formattedDate = formatDate(processed.date);
    processed.dateTimestamp = dateToTimestamp(processed.date);
  } else {
    processed.formattedDate = "";
    processed.dateTimestamp = 0;
  }
  
  // Process categories
  let categories: string[] = [];
  if (typeof processed.category === 'string') {
    categories = processed.category.split(',').map(cat => cat.trim());
  } else if (Array.isArray(processed.category)) {
    categories = processed.category.map(String);
  }
  processed.processedCategories = categories;
  
  return processed;
});

// Sort by newest first and take only the 4 most recent bookmarks (increased from 3)
processedBookmarks.sort((a, b) => b.dateTimestamp - a.dateTimestamp);
const recentBookmarks = processedBookmarks.slice(0, 4);
---

<div class="space-y-3">
  <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-3 gap-3">
    {recentBookmarks.map((bookmark, index) => {
      const cardClasses = [
        "bookmark-card bauhaus-card p-4 border border-gray-200 dark:border-[#333333]", 
        "transition-all duration-200", 
        "bg-white dark:bg-[#1a1a1a] h-[188px] flex flex-col"
      ];
      
      // Add the sm:hidden class only to the 4th card
      if (index === 3) {
        cardClasses.push("sm:hidden");
      }
      
      return (
        <div 
          data-categories={bookmark.processedCategories.join(' ')}
          data-url={bookmark.url}
          data-date={bookmark.date || ""}
          class={`:uno: ${cardClasses.join(' ')}`}
        >
          <div class=":uno: flex items-center justify-between mb-2">
            {bookmark.formattedDate && (
              <span class=":uno: text-[10px] bauhaus-mono text-gray-400 dark:text-gray-500 tracking-tight">{bookmark.formattedDate}</span>
            )}
          </div>
          
          <div class=":uno: mb-3">
            <h3 class=":uno: font-medium text-sm text-gray-900 dark:text-gray-300 bauhaus-title">
              <a
                href={bookmark.url}
                target="_blank"
                rel="noopener noreferrer"
                class=":uno: bookmark-link bauhaus-link hover:text-blue-600 dark:hover:text-gray-200 flex items-start"
                title={bookmark.url}
                data-url={bookmark.url}
              >
                {bookmark.name.toLowerCase()}
                <svg xmlns="http://www.w3.org/2000/svg" class=":uno: h-3 w-3 ml-1 mt-0.5 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
              </a>
            </h3>
          </div>
          
          <p class=":uno: text-xs text-gray-600 dark:text-gray-500 mb-3 line-clamp-3 min-h-[48px] leading-relaxed bauhaus-subtitle">
            {bookmark.description || "no description available"}
          </p>
          
          <div class=":uno: mt-auto flex flex-wrap gap-1">
            {bookmark.processedCategories.map(category => (
              <span class=":uno: text-[10px] px-1.5 py-0.5 rounded-sm bg-white dark:bg-neutral-800 text-gray-600 dark:text-gray-500 border border-gray-200 dark:border-neutral-700">
                {category.toLowerCase()}
              </span>
            ))}
          </div>
        </div>
      );
    })}
  </div>
  
  <div class=":uno: flex justify-end">
    <AppLink
      class=":uno: mt-8 inline-flex items-center justify-center w-auto h-auto px-3 py-2 rounded-sm bauhaus-button bg-white dark:bg-stone-900 hover:bg-gray-50 dark:hover:bg-stone-800 transition-all duration-200 group relative text-sm"
      href="/bookmarks"
      aria-label="See all bookmarks"
    >
      <span class=":uno: font-normal bauhaus-mono lowercase">all bookmarks</span>
      <Icon name="lucide:arrow-right" class=":uno: w-4 h-4 ml-1 text-gray-700 dark:text-gray-300" />
    </AppLink>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize visited bookmarks from localStorage
    const visitedBookmarks = new Set(
      JSON.parse(localStorage.getItem('visitedBookmarks') || '[]')
    );
    
    // Apply visited styles
    const bookmarkCards = document.querySelectorAll('.bookmark-card');
    bookmarkCards.forEach(card => {
      const url = card.getAttribute('data-url');
      if (url && visitedBookmarks.has(url)) {
        card.classList.add('visited');
      }
    });
    
    // Mark bookmarks as visited when clicked
    const bookmarkLinks = document.querySelectorAll('.bookmark-link');
    bookmarkLinks.forEach(link => {
      link.addEventListener('click', () => {
        const url = link.getAttribute('data-url');
        if (url) {
          visitedBookmarks.add(url);
          localStorage.setItem('visitedBookmarks', JSON.stringify([...visitedBookmarks]));
          
          const card = link.closest('.bookmark-card');
          if (card && !card.classList.contains('visited')) {
            card.classList.add('visited');
          }
        }
      });
    });
  });
</script>

<style is:global>
  /* Applied only to bookmark card styling */
  .bookmark-card {
    position: relative;
    transition: transform 0.2s ease, border-color 0.2s ease, box-shadow 0.2s ease;
  }
  
  .bookmark-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
  }
  
  .dark .bookmark-card:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  
  /* Visited bookmark styles */
  .bookmark-card::before {
    content: "";
    position: absolute;
    bottom: 10px;
    right: 8px;
    width: 18px;
    height: 18px;
    border-radius: 50%;
    background-color: transparent;
    opacity: 0;
    transform: scale(0);
    transition: all 0.3s ease;
    z-index: 1;
  }
  
  .bookmark-card.visited::before {
    content: "âœ“";
    background-color: #e5e7eb;
    color: #4b5563;
    font-size: 12px;
    line-height: 18px;
    text-align: center;
    opacity: 0.9;
    transform: scale(1);
    box-shadow: none;
  }
  
  .dark .bookmark-card.visited::before {
    background-color: #2a2a2a;
    color: #f0f0f0;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  }
  
  /* Bauhaus-inspired design elements */
  .bauhaus-card {
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .bauhaus-title {
    font-family: 'Montserrat', sans-serif;
    font-weight: 600;
    letter-spacing: -0.02em;
  }
  
  .bauhaus-subtitle {
    font-family: 'Lato', sans-serif;
    font-weight: 400;
    letter-spacing: 0.01em;
  }
  
  .bauhaus-mono {
    font-family: 'IBM Plex Mono', monospace;
    font-weight: 400;
    letter-spacing: 0.02em;
  }
  
  .bauhaus-link {
    text-decoration: none;
    transition: color 0.2s ease;
  }
  
  .bauhaus-link:hover {
    color: #3498db;
  }
  
  .bauhaus-button {
    border-radius: 4px;
    padding: 8px 12px;
    font-size: 14px;
    font-weight: 500;
    letter-spacing: 0.01em;
    transition: background-color 0.2s ease, color 0.2s ease;
  }
  
  .bauhaus-button:hover {
    background-color: #f7f7f7;
    color: #333;
  }
</style>
