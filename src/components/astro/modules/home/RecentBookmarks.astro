---
import { Icon } from "astro-icon/components";
import bookmarksData from "@/data/bookmarks.json";
import AppLink from "@/components/astro/ui/AppLink.astro";

// Define proper types for our bookmarks
interface BaseBookmark {
  name: string;
  url: string;
  description: string;
  date?: string;
  timestamp?: string;
}

interface StringCategoryBookmark extends BaseBookmark {
  category: string;
}

interface ArrayCategoryBookmark extends BaseBookmark {
  category: string[];
}

type Bookmark = StringCategoryBookmark | ArrayCategoryBookmark;

// Extended bookmark with processed properties
interface ProcessedBookmark extends BaseBookmark {
  id: string;
  category: string | string[];
  formattedDate: string;
  dateTimestamp: number;
  processedCategories: string[];
  timestamp?: string;
  status?: string;
}

// Category colors - limited, minimal palette aligned with Bauhaus principles
const categoryColors: Record<string, { bg: string, text: string, special?: boolean }> = {
  "uncategorized": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "article": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "articles": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "tools": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "design": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "development": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "productivity": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "books": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "videos": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "ai": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" }
};

// Get color for a category, with fallback to uncategorized
function getCategoryColor(category: string) {
  const lowerCategory = category.toLowerCase();
  return categoryColors[lowerCategory] || categoryColors["uncategorized"];
}

// Format date function
function formatDate(dateString: string | undefined): string {
  if (!dateString) return "";
  
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return ""; // Invalid date
  
  return new Intl.DateTimeFormat('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  }).format(date);
}

// Convert string to date for sorting
function dateToTimestamp(dateString: string | undefined, timestampString: string | undefined): number {
  // First check if timestamp exists (most precise)
  if (timestampString) {
    const timestamp = new Date(timestampString);
    return isNaN(timestamp.getTime()) ? 0 : timestamp.getTime();
  }
  
  // Fall back to date if timestamp isn't available
  if (dateString) {
    const date = new Date(dateString);
    return isNaN(date.getTime()) ? 0 : date.getTime();
  }
  
  return 0; // No date means oldest
}

// Process bookmarks
let processedBookmarks = bookmarksData.bookmarks.map((bookmark, index) => {
  // Create a new object with all properties from the original bookmark
  const processed = { ...bookmark } as ProcessedBookmark;
  
  // Format the date if it exists
  if (processed.date) {
    processed.formattedDate = formatDate(processed.date);
  } else if (processed.timestamp) {
    processed.formattedDate = formatDate(processed.timestamp);
  } else {
    processed.formattedDate = "";
  }
  
  // Get timestamp for sorting (using timestamp field first if available, then date field)
  processed.dateTimestamp = dateToTimestamp(processed.date, processed.timestamp);
  
  // Process categories
  let categories: string[] = [];
  if (typeof processed.category === 'string') {
    categories = processed.category.split(',').map(cat => cat.trim());
  } else if (Array.isArray(processed.category)) {
    categories = processed.category.map(String);
  }
  processed.processedCategories = categories;
  
  return processed;
});

// Sort by newest first and take only the 5 most recent bookmarks
processedBookmarks.sort((a, b) => b.dateTimestamp - a.dateTimestamp);

// Initialize bookmark numbering with highest at top (matching bookmarks page)
processedBookmarks.forEach((bookmark, index) => {
  bookmark.id = String(processedBookmarks.length - index);
});

const recentBookmarks = processedBookmarks.slice(0, 5);

---

<div class="space-y-6">
  <ul class="list-none pl-0 space-y-3">
    {recentBookmarks.map((bookmark, index) => (
      <li 
        class="bookmark-card group w-full relative border-b border-gray-200 dark:border-neutral-800 pb-3 transition-colors duration-200"
        data-url={bookmark.url}
        transition:name={`bookmark-${bookmark.url.replace(/[^a-zA-Z0-9]/g, '-')}`}
      >
        <!-- Header with title and external link -->
        <div class="flex items-baseline justify-between mb-1">
          <div class="flex items-baseline gap-3 min-w-0 flex-1">
            <span class="font-mono text-sm text-gray-400 dark:text-gray-500 tabular-nums flex-shrink-0">
              {bookmark.id.toString().padStart(2, '0')}
            </span>
            <a 
              href={bookmark.url} 
              target="_blank" 
              rel="noopener noreferrer" 
              class="text-base font-medium text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors truncate"
            >
              {bookmark.name}
            </a>
          </div>
          <div class="flex-shrink-0">
            <span class="text-xs text-gray-500 dark:text-gray-400">{bookmark.formattedDate}</span>
          </div>
        </div>
        
        <!-- Description only -->
        <p class="text-sm text-gray-600 dark:text-gray-400 ml-9 line-clamp-2">
          {bookmark.description || "No description available"}
        </p>
      </li>
    ))}
  </ul>
  
  <div class=":uno: flex justify-end">
    <AppLink
      class=":uno: mt-4 inline-flex items-center justify-center w-auto h-auto px-3 py-2 rounded-sm bauhaus-button bg-neutral-100 dark:bg-neutral-800 hover:bg-neutral-50 dark:hover:bg-neutral-700 transition-all duration-200 group relative text-sm"
      href="/bookmarks"
      aria-label="See all bookmarks"
    >
      <span class=":uno: font-normal bauhaus-mono lowercase">all bookmarks</span>
      <Icon name="lucide:arrow-right" class=":uno: w-4 h-4 ml-1 text-gray-700 dark:text-gray-300" />
    </AppLink>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize visited bookmarks from localStorage
    const visitedBookmarks = new Set(
      JSON.parse(localStorage.getItem('visitedBookmarks') || '[]')
    );
    
    // Apply visited styles
    const bookmarkLinks = document.querySelectorAll('a[data-url]');
    bookmarkLinks.forEach(link => {
      const url = link.getAttribute('data-url');
      if (url && visitedBookmarks.has(url)) {
        link.classList.add('visited');
      }
      
      // Mark bookmarks as visited when clicked
      link.addEventListener('click', () => {
        const url = link.getAttribute('data-url');
        if (url) {
          visitedBookmarks.add(url);
          localStorage.setItem('visitedBookmarks', JSON.stringify([...visitedBookmarks]));
          
          if (!link.classList.contains('visited')) {
            link.classList.add('visited');
          }
        }
      });
    });
  });
</script>

<style is:global>
  /* Minimal bookmark styling */
  a[data-url].visited {
    opacity: 0.7;
  }
  
  /* Line clamp for descriptions */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
