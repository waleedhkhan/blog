---
import Layout from "@/components/astro/layout/Layout.astro";
import bookmarksData from "@/data/bookmarks.json";

const title = "Bookmarks â€” Waleed";
const description = "A collection of useful links and resources";

// Process categories - split comma-separated categories and extract unique values
const allCategories = new Set();
bookmarksData.bookmarks.forEach(bookmark => {
  if (bookmark.category) {
    const categories = bookmark.category.split(',').map(cat => cat.trim());
    categories.forEach(cat => allCategories.add(cat));
  }
});
const uniqueCategories = Array.from(allCategories).sort();
---

<Layout title={title} description={description}>
  <section class=":uno: space-y-6">
    <div class=":uno: space-y-3">
      <h1 class=":uno: font-semibold text-2xl tracking-tight text-heading">Bookmarks</h1>
      <p class=":uno: text-base leading-[1.75]">{description}</p>
    </div>

    <div class=":uno: flex flex-col sm:flex-row gap-3 items-start sm:items-center justify-between">
      <!-- Search input - Updated gray colors -->
      <div class=":uno: relative w-full sm:w-64">
        <input 
          type="text" 
          id="search-input" 
          placeholder="Search bookmarks..." 
          class=":uno: w-full px-3 py-1.5 text-sm border rounded-md bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-700 focus:ring-2 focus:ring-gray-400 dark:focus:ring-gray-600 focus:border-gray-400 dark:focus:border-gray-600"
        />
        <svg xmlns="http://www.w3.org/2000/svg" class=":uno: absolute right-2 top-2 h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
      </div>

      <!-- Stats counter -->
      <p id="results-count" class=":uno: text-xs text-gray-500 dark:text-gray-400 mt-2 sm:mt-0">
        Showing {bookmarksData.bookmarks.length} bookmarks
      </p>
    </div>

    <!-- Category filter chips - Updated gray colors -->
    <div class=":uno: flex flex-wrap gap-2 mb-2">
      <button 
        class=":uno: category-chip text-xs px-3 py-1.5 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-transparent hover:border-gray-300 dark:hover:border-gray-700 transition-all duration-200 hover:scale-105 active:scale-95 hover:shadow-sm" 
        data-category="all"
      >
        All
      </button>
      {uniqueCategories.map(category => (
        <button 
          class=":uno: category-chip text-xs px-3 py-1.5 rounded-full bg-gray-50 dark:bg-gray-800 text-gray-700 dark:text-gray-300 border border-transparent hover:border-gray-300 dark:hover:border-gray-700 transition-all duration-200 hover:scale-105 active:scale-95 hover:shadow-sm" 
          data-category={category}
        >
          {category}
        </button>
      ))}
    </div>

    <!-- Compact bookmark grid - Updated gray colors -->
    <div id="bookmarks-container" class=":uno: grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3">
      {bookmarksData.bookmarks.map((bookmark) => {
        // Process categories into an array
        const categories = bookmark.category ? bookmark.category.split(',').map(cat => cat.trim()) : [];
        
        return (
          <div 
            data-categories={categories.join(' ')}
            data-url={bookmark.url}
            class=":uno: bookmark-card p-3 border border-gray-200 dark:border-gray-700 rounded-md transition-all duration-200 hover:shadow-sm hover:border-gray-300 dark:hover:border-gray-600 bg-white dark:bg-gray-800"
          >
            <div class=":uno: mb-2">
              <h3 class=":uno: font-medium text-sm text-gray-900 dark:text-gray-100">
                <a
                  href={bookmark.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class=":uno: bookmark-link hover:text-blue-600 dark:hover:text-gray-300 flex items-start"
                  title={bookmark.url}
                  data-url={bookmark.url}
                >
                  {bookmark.name}
                  <svg xmlns="http://www.w3.org/2000/svg" class=":uno: h-3 w-3 ml-1 mt-0.5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                </a>
              </h3>
            </div>
            
            <p class=":uno: text-xs text-gray-600 dark:text-gray-400 mb-2 line-clamp-2 h-8">
              {bookmark.description || "No description available"}
            </p>
            
            <div class=":uno: flex flex-wrap gap-1 mt-1">
              {categories.map(category => (
                <span class=":uno: text-[10px] px-1.5 py-0.5 bg-gray-100 dark:bg-gray-700 rounded-full text-gray-600 dark:text-gray-300">
                  {category}
                </span>
              ))}
            </div>
          </div>
        );
      })}
    </div>

    <!-- No results message -->
    <div id="no-results" class=":uno: hidden text-center py-6 text-gray-500 dark:text-gray-400 text-sm">
      No bookmarks found matching your search
    </div>
  </section>

  <script>
    // Search and filter functionality
    document.addEventListener('DOMContentLoaded', () => {
      const searchInput = document.getElementById('search-input');
      const categoryChips = document.querySelectorAll('.category-chip');
      const bookmarkCards = document.querySelectorAll('.bookmark-card');
      const bookmarkLinks = document.querySelectorAll('.bookmark-link');
      const resultsCount = document.getElementById('results-count');
      const noResults = document.getElementById('no-results');
      const bookmarksContainer = document.getElementById('bookmarks-container');

      // Track the current selected category
      let currentCategory = 'all';
      
      // Initialize visited bookmarks from localStorage
      const visitedBookmarks = new Set(
        JSON.parse(localStorage.getItem('visitedBookmarks') || '[]')
      );
      
      // Apply visited styles on page load
      applyVisitedStyles();

      function filterBookmarks() {
        const searchTerm = searchInput.value.toLowerCase();
        
        let visibleCount = 0;

        bookmarkCards.forEach(card => {
          const title = card.querySelector('h3').textContent.toLowerCase();
          const categoriesString = card.dataset.categories;
          const description = card.querySelector('p').textContent.toLowerCase();
          
          const matchesSearch = title.includes(searchTerm) || description.includes(searchTerm);
          const matchesCategory = currentCategory === 'all' || 
                                 (categoriesString && categoriesString.split(' ').includes(currentCategory));
          
          if (matchesSearch && matchesCategory) {
            card.classList.remove('hidden');
            visibleCount++;
          } else {
            card.classList.add('hidden');
          }
        });

        resultsCount.textContent = `Showing ${visibleCount} bookmarks`;
        
        if (visibleCount === 0) {
          noResults.classList.remove('hidden');
          bookmarksContainer.classList.add('hidden');
        } else {
          noResults.classList.add('hidden');
          bookmarksContainer.classList.remove('hidden');
        }

        // UPDATED: Enhanced category chip active state with grayscale theme
        categoryChips.forEach(chip => {
          if (chip.dataset.category === currentCategory) {
            chip.classList.add('bg-gray-200', 'dark:bg-gray-700', 'text-gray-900', 'dark:text-gray-100', 
                              'border-gray-300', 'dark:border-gray-600', 'shadow-sm', 'scale-105');
            chip.classList.remove('bg-gray-50', 'bg-gray-100', 'dark:bg-gray-800', 'text-gray-700', 'dark:text-gray-300', 
                                'border-transparent');
            
            // Add pulse animation to the active chip
            chip.style.animation = 'pulse 2s infinite';
          } else {
            chip.classList.remove('bg-gray-200', 'dark:bg-gray-700', 'text-gray-900', 'dark:text-gray-100', 
                                 'border-gray-300', 'dark:border-gray-600', 'shadow-sm', 'scale-105');
            chip.classList.add('bg-gray-50', 'dark:bg-gray-800', 'text-gray-700', 'dark:text-gray-300', 
                              'border-transparent');
            
            // Remove animation from inactive chips
            chip.style.animation = '';
          }
        });
      }
      
      // Mark bookmark as visited when clicked
      bookmarkLinks.forEach(link => {
        // Add click event listener to each bookmark link
        link.addEventListener('click', () => {
          const url = link.getAttribute('data-url');
          if (url) {
            // Add to visited set
            visitedBookmarks.add(url);
            // Save to localStorage
            localStorage.setItem('visitedBookmarks', JSON.stringify([...visitedBookmarks]));
            // Apply visited styles with animation
            const card = link.closest('.bookmark-card');
            if (card && !card.classList.contains('visited')) {
              card.classList.add('visited');
              card.classList.add('just-visited'); // Add class for animation trigger
              setTimeout(() => {
                card.classList.remove('just-visited');
              }, 500); // Shorter animation time for simplicity
            }
          }
        });
        
        // Check if this link was previously visited
        const url = link.getAttribute('data-url');
        if (url && visitedBookmarks.has(url)) {
          const card = link.closest('.bookmark-card');
          if (card) {
            card.classList.add('visited');
          }
        }
      });
      
      // Function to apply visited styles based on localStorage data
      function applyVisitedStyles() {
        bookmarkCards.forEach(card => {
          const url = card.getAttribute('data-url');
          if (url && visitedBookmarks.has(url)) {
            card.classList.add('visited');
          }
        });
      }

      searchInput.addEventListener('input', filterBookmarks);
      
      // Handle category chip clicks
      categoryChips.forEach(chip => {
        chip.addEventListener('click', () => {
          currentCategory = chip.dataset.category;
          filterBookmarks();
        });
      });

      // Initial filter
      filterBookmarks();
    });
  </script>

  <style>
    /* Subtle pulse animation - UPDATED FOR GRAYSCALE THEME */
    @keyframes pulse {
      0% {
        box-shadow: 0 0 0 0 rgba(107, 114, 128, 0.2); /* Gray-500 with low opacity */
      }
      70% {
        box-shadow: 0 0 0 6px rgba(107, 114, 128, 0);
      }
      100% {
        box-shadow: 0 0 0 0 rgba(107, 114, 128, 0);
      }
    }

    /* Dark mode animation - UPDATED FOR GRAYSCALE THEME */
    @media (prefers-color-scheme: dark) {
      @keyframes pulse {
        0% {
          box-shadow: 0 0 0 0 rgba(156, 163, 175, 0.2); /* Gray-400 with low opacity */
        }
        70% {
          box-shadow: 0 0 0 6px rgba(156, 163, 175, 0);
        }
        100% {
          box-shadow: 0 0 0 0 rgba(156, 163, 175, 0);
        }
      }
    }

    /* UPDATED: Focus styles for accessibility - grayscale theme */
    .category-chip:focus {
      outline: 2px solid rgba(107, 114, 128, 0.5); /* Gray-500 */
      outline-offset: 2px;
    }

    /* Ensure we don't show outline when using mouse, only for keyboard navigation */
    .category-chip:focus:not(:focus-visible) {
      outline: none;
    }
    
    /* SIMPLIFIED: Visited bookmark styling - Minimal approach */
    .bookmark-card.visited {
      /* No background or border changes - keeping it minimal */
    }
    
    /* SIMPLIFIED: Text remains the same in both light and dark mode */
    .bookmark-card.visited h3 a,
    .bookmark-card.visited p,
    .bookmark-card.visited .flex span {
      /* No color changes - keeping original text colors */
    }
    
    /* Position relative for the checkmark container */
    .bookmark-card {
      position: relative;
    }

    /* UPDATED: Moved checkmark to bottom of card */
    .bookmark-card::before {
      content: "";
      position: absolute;
      bottom: 8px;  /* Changed from top to bottom */
      right: 8px;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background-color: transparent;
      opacity: 0;
      transform: scale(0);
      transition: all 0.3s ease;
      z-index: 1;
    }
    
    /* UPDATED: Added small visited text indicator beneath checkmark */
    .bookmark-card.visited::after {
      content: "viewed";
      position: absolute;
      bottom: 8px;
      right: 30px;
      font-size: 10px;
      color: #6b7280; /* Gray-500 */
      opacity: 0.7;
    }
    
    /* Dark mode text indicator */
    @media (prefers-color-scheme: dark) {
      .bookmark-card.visited::after {
        color: #9ca3af; /* Gray-400 */
      }
    }
    
    /* SIMPLIFIED: Visited card checkmark - Light Theme */
    .bookmark-card.visited::before {
      content: "âœ“";
      background-color: #e5e7eb; /* Gray-200 - very subtle */
      color: #4b5563; /* Gray-600 - subtle text */
      font-size: 12px;
      line-height: 18px;
      text-align: center;
      opacity: 0.9;
      transform: scale(1);
      box-shadow: none; /* No shadow for minimal look */
    }
    
    /* SIMPLIFIED: Visited card checkmark - Dark Theme */
    @media (prefers-color-scheme: dark) {
      .bookmark-card.visited::before {
        background-color: #4b5563; /* Gray-600 - more in line with site theme */
        color: #f3f4f6; /* Gray-100 - light text */
        box-shadow: none;
      }
    }
    
    /* Animation for just visited cards - keep subtle animation */
    .bookmark-card.just-visited::before {
      animation: simple-pop 0.3s ease-out forwards;
    }
    
    /* SIMPLIFIED: Simplified pop animation */
    @keyframes simple-pop {
      0% {
        transform: scale(0);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 0.9;
      }
    }
    
    /* SIMPLIFIED: Remove card highlight animation */
    .bookmark-card.just-visited {
      /* No animation */
    }
    
    /* SIMPLIFIED: Remove SVG extras */
    .checkmark-svg {
      display: none;
    }
  </style>
  
  <!-- Remove SVG definitions to keep it minimal -->
</Layout>

<script>
  // Add an additional script to detect system theme changes
  document.addEventListener('DOMContentLoaded', () => {
    // Check if the browser supports theme detection
    if (window.matchMedia) {
      const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      
      // Add change listener
      darkModeMediaQuery.addEventListener('change', (e) => {
        // Refresh visited states to ensure correct theme styling
        const visitedCards = document.querySelectorAll('.bookmark-card.visited');
        visitedCards.forEach(card => {
          // Toggle and re-add class to refresh styles
          card.classList.remove('visited');
          setTimeout(() => {
            card.classList.add('visited');
          }, 10);
        });
      });
    }
  });
</script>
