---
import Layout from "@/components/astro/layout/Layout.astro";
import bookmarksData from "@/data/bookmarks.json";

const title = "Bookmarks â€” Waleed";
const description = "A collection of useful links and resources";

// Define proper types for our bookmarks
interface BaseBookmark {
  id: string;
  name: string;
  url: string;
  description: string;
  date?: string;
  timestamp?: string;
}

interface StringCategoryBookmark extends BaseBookmark {
  category: string;
}

interface ArrayCategoryBookmark extends BaseBookmark {
  category: string[];
}

type Bookmark = StringCategoryBookmark | ArrayCategoryBookmark;

// Extended type for processed bookmarks with additional properties
interface ProcessedBookmark extends BaseBookmark {
  originalIndex: number;
  formattedDate: string;
  dateTimestamp: number;
  processedCategories: string[];
  category: string | string[];
}

// Process categories - handle both string and array formats
const allCategories = new Set<string>();

// Format date function
function formatDate(dateString: string | undefined): string {
  if (!dateString) return "";
  
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return ""; // Invalid date
  
  return new Intl.DateTimeFormat('en-US', { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric' 
  }).format(date);
}

// Convert string to date for sorting
function dateToTimestamp(dateString: string | undefined, timestampString: string | undefined): number {
  // First check if timestamp exists (most precise)
  if (timestampString) {
    const timestamp = new Date(timestampString);
    return isNaN(timestamp.getTime()) ? 0 : timestamp.getTime();
  }
  
  // Fall back to date if timestamp isn't available
  if (dateString) {
    const date = new Date(dateString);
    return isNaN(date.getTime()) ? 0 : date.getTime();
  }
  
  return 0; // No date means oldest
}

// Process bookmarks and add index
let processedBookmarks = bookmarksData.bookmarks.map((bookmark, index) => {
  // Create a new object with all properties from the original bookmark
  const processed = { ...bookmark } as ProcessedBookmark;
  
  // Add original index for stable sorting
  processed.originalIndex = index;
  
  // Format the date if it exists
  if (processed.date) {
    processed.formattedDate = formatDate(processed.date);
  } else {
    processed.formattedDate = "";
  }
  
  // Get timestamp for sorting (using timestamp field first if available, then date field)
  processed.dateTimestamp = dateToTimestamp(processed.date, processed.timestamp);
  
  // Process categories
  let categories: string[] = [];
  if (typeof processed.category === 'string') {
    categories = processed.category.split(',').map(cat => cat.trim());
  } else if (Array.isArray(processed.category)) {
    categories = processed.category.map(String);
  }
  processed.processedCategories = categories;
  
  // Collect categories for filter
  categories.forEach(cat => allCategories.add(cat));
  
  return processed;
});

// Initially sort by newest first (can be toggled by the user)
let currentSortOrder = "desc"; // Default sort order (descending - newest first)

// Sort bookmarks by date based on initial sort order
processedBookmarks.sort((a, b) => {
  const sortMultiplier = currentSortOrder === "desc" ? -1 : 1;
  
  // Sort by timestamp based on sort direction
  if (b.dateTimestamp !== a.dateTimestamp) {
    return (b.dateTimestamp - a.dateTimestamp) * sortMultiplier;
  }
  
  // If dates are equal, maintain original order for stability
  return (a.originalIndex - b.originalIndex) * sortMultiplier;
});

// Re-number the IDs based on the new sort order
processedBookmarks.forEach((bookmark, index) => {
  bookmark.id = String(index + 1);
});

const uniqueCategories = Array.from(allCategories).sort();
---

<Layout title={title} description={description}>
  <section class="space-y-6">
    <div class="space-y-3 text-center">
      <h1 class="font-semibold text-3xl tracking-tight text-gray-900 dark:text-gray-300">Bookmarks</h1>
      <p class="text-gray-700 dark:text-gray-400 text-base leading-relaxed">{description}</p>
    </div>

    <!-- Clean search section with minimalist input -->
    <div class="max-w-xl mx-auto mb-6">
      <div class="relative">
        <input 
          type="text" 
          id="search-input" 
          placeholder="Search bookmarks..."
          aria-label="Search bookmarks" 
          class="w-full px-3 py-2 text-sm border-b border-neutral-200 dark:border-neutral-700 bg-neutral-100 dark:bg-neutral-800 focus:outline-none focus:border-neutral-400 dark:focus:border-neutral-500 transition-all"
        />
        <svg xmlns="http://www.w3.org/2000/svg" class="absolute right-2 top-2 h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
      </div>
    </div>

    <!-- Simple category filter -->
    <div class="flex flex-wrap gap-1.5 mb-6 justify-center">
      <button 
        class="category-chip text-xs px-4 py-1.5 rounded-full bg-neutral-100 dark:bg-neutral-800 text-gray-600 dark:text-gray-500 border border-neutral-200 dark:border-neutral-700 transition-colors hover:bg-neutral-200 dark:hover:bg-neutral-700" 
        data-category="all"
      >
        all
      </button>
      {uniqueCategories.map(category => (
        <button 
          class="category-chip text-xs px-4 py-1.5 rounded-full bg-neutral-50 dark:bg-neutral-700 text-gray-600 dark:text-gray-500 border border-neutral-300 dark:border-neutral-700 transition-colors hover:bg-neutral-200 dark:hover:bg-neutral-600" 
          data-category={category}
        >
          {category.toLowerCase()}
        </button>
      ))}
    </div>
    
    <!-- Simple sort controls -->
    <div class="flex justify-end mb-4">
      <div class="flex items-center gap-1 text-xs text-gray-500 dark:text-gray-400">
        <span>Sort:</span>
        <button 
          id="sort-newest" 
          class="px-2 py-0.5 hover:text-gray-800 dark:hover:text-gray-200 active-sort-button"
        >
          Newest
        </button>
        <span>|</span>
        <button 
          id="sort-oldest" 
          class="px-2 py-0.5 hover:text-gray-800 dark:hover:text-gray-200"
        >
          Oldest
        </button>
      </div>
    </div>

    <!-- Clean minimal table -->
    <div id="bookmarks-container" class="w-full overflow-x-auto pb-8 max-w-4xl mx-auto">
      <table class="min-w-full text-left">
        <thead>
          <tr class="border-b border-neutral-200 dark:border-neutral-700">
            <th class="py-4 px-4 text-sm font-medium tracking-wide text-gray-500 dark:text-gray-400">NAME</th>
            <th class="py-4 px-4 text-sm font-medium tracking-wide text-gray-500 dark:text-gray-400 hidden md:table-cell">DESCRIPTION</th>
            <th class="py-4 px-4 text-sm font-medium tracking-wide text-gray-500 dark:text-gray-400 hidden sm:table-cell">CATEGORY</th>
            <th class="py-4 px-4 text-sm font-medium tracking-wide text-gray-500 dark:text-gray-400 hidden sm:table-cell">ADDED</th>
          </tr>
        </thead>
        <tbody>
          {processedBookmarks.map((bookmark, index) => (
            <tr 
              data-categories={bookmark.processedCategories.join(' ')}
              data-url={bookmark.url}
              data-date={bookmark.date || ""}
              class="bookmark-card border-b border-neutral-100 dark:border-neutral-800 hover:bg-neutral-50/50 dark:hover:bg-neutral-700/30 transition-colors"
            >
              <td class="py-4 px-4">
                <a
                  href={bookmark.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="bookmark-link text-base font-medium text-gray-800 dark:text-gray-500 hover:text-blue-600 dark:hover:text-blue-400 transition-colors flex items-center gap-2"
                  title={bookmark.url}
                  data-url={bookmark.url}
                >
                  {bookmark.name.toLowerCase()}
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                </a>
              </td>
              <td class="py-4 px-4 text-sm leading-relaxed text-gray-600 dark:text-gray-500 hidden md:table-cell max-w-md">
                {bookmark.description || "No description available"}
              </td>
              <td class="py-4 px-4 hidden sm:table-cell">
                <div class="flex flex-wrap gap-1.5">
                  {bookmark.processedCategories.map(category => (
                    <span class="text-xs px-2 py-0.5 rounded bg-neutral-50 dark:bg-neutral-700 text-gray-600 dark:text-gray-500 border border-neutral-300 dark:border-neutral-700">
                      {category.toLowerCase()}
                    </span>
                  ))}
                </div>
              </td>
              <td class="py-4 px-4 text-xs font-mono text-gray-400 dark:text-gray-500 hidden sm:table-cell">
                {bookmark.formattedDate}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>

    <!-- No results message -->
    <div id="no-results" class="hidden text-center py-8 text-gray-500 dark:text-gray-400 text-sm">
      No bookmarks found matching your search
    </div>
  </section>

  <style>
    /* Responsive table styles */
    table {
      width: 100%;
      border-spacing: 0;
    }

    @media (max-width: 640px) {
      table {
        font-size: 0.875rem;
      }
    }

    /* Active category chip */
    .category-chip.active {
      background-color: #e5e7eb;
      color: #111827;
      font-weight: 500;
      border-color: #d1d5db;
    }
    
    .dark .category-chip.active {
      background-color: #404040;
      color: #9ca3af;
      font-weight: 500;
      border-color: #525252;
    }

    /* Active sort button */
    .active-sort-button {
      font-weight: 500;
      color: #111827;
    }
    
    .dark .active-sort-button {
      color: #9ca3af;
    }
    
    /* Custom scrollbar for table */
    #bookmarks-container::-webkit-scrollbar {
      height: 6px;
    }

    #bookmarks-container::-webkit-scrollbar-track {
      background: transparent;
    }

    #bookmarks-container::-webkit-scrollbar-thumb {
      background-color: rgba(156, 163, 175, 0.3);
      border-radius: 3px;
    }

    .dark #bookmarks-container::-webkit-scrollbar-thumb {
      background-color: rgba(75, 85, 99, 0.4);
    }

    /* Search input focus styles */
    #search-input:focus {
      outline: none;
    }
    
    /* Visited link styles - Bauhaus minimal design */
    .bookmark-link:visited,
    .bookmark-link.previously-visited {
      color: var(--color-bauhaus-blue, rgba(0, 0, 0, 0.6));
      font-weight: medium; /* Keep font weight consistent */
    }
    
    .dark .bookmark-link:visited,
    .dark .bookmark-link.previously-visited {
      color: var(--dark-color-bauhaus-blue, rgba(255, 255, 255, 0.6));
    }
    
    /* Add a subtle visual indicator for visited links */
    .bookmark-link:visited svg,
    .bookmark-link.previously-visited svg {
      opacity: 0.7;
    }
    
    /* Maintain hover styles for consistency */
    .bookmark-link:visited:hover,
    .bookmark-link.previously-visited:hover {
      color: var(--accent, #3b82f6);
    }
    
    .dark .bookmark-link:visited:hover,
    .dark .bookmark-link.previously-visited:hover {
      color: var(--accent, #60a5fa);
    }
    
    /* Add focus styles for better accessibility */
    .category-chip:focus {
      outline: 2px solid #3b82f6;
      outline-offset: 2px;
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // DOM Elements
      const bookmarkCards = document.querySelectorAll('.bookmark-card');
      const searchInput = document.getElementById('search-input');
      const categoryButtons = document.querySelectorAll('.category-chip');
      const sortNewestButton = document.getElementById('sort-newest');
      const sortOldestButton = document.getElementById('sort-oldest');
      const noResultsElement = document.getElementById('no-results');
      const bookmarksContainer = document.getElementById('bookmarks-container');
      
      // State
      let activeCategory = 'all';
      let sortDirection = 'newest';
      let searchQuery = '';
      
      // Initialize active category
      categoryButtons.forEach(button => {
        if (button.dataset.category === 'all') {
          button.classList.add('active');
        }
        
        button.addEventListener('click', () => {
          // Remove active class from all category buttons
          categoryButtons.forEach(b => b.classList.remove('active'));
          
          // Add active class to clicked button
          button.classList.add('active');
          
          // Update active category
          activeCategory = button.dataset.category;
          
          // Apply filters
          applyFilters();
        });
      });
      
      // Initialize sort buttons
      sortNewestButton.classList.add('active-sort-button');
      
      sortNewestButton.addEventListener('click', () => {
        sortDirection = 'newest';
        sortNewestButton.classList.add('active-sort-button');
        sortOldestButton.classList.remove('active-sort-button');
        applyFilters();
      });
      
      sortOldestButton.addEventListener('click', () => {
        sortDirection = 'oldest';
        sortOldestButton.classList.add('active-sort-button');
        sortNewestButton.classList.remove('active-sort-button');
        applyFilters();
      });
      
      // Search functionality
      searchInput.addEventListener('input', (e) => {
        searchQuery = e.target.value.toLowerCase();
        applyFilters();
      });
      
      // Apply filters function
      function applyFilters() {
        let visibleCount = 0;
        
        // Get all bookmark cards and store in array for sorting
        const cardsArray = Array.from(bookmarkCards);
        
        // Sort cards based on sort direction
        cardsArray.sort((a, b) => {
          const dateA = a.dataset.date;
          const dateB = b.dataset.date;
          
          if (sortDirection === 'newest') {
            return dateB.localeCompare(dateA);
          } else {
            return dateA.localeCompare(dateB);
          }
        });
        
        // Apply the sort order
        cardsArray.forEach(card => {
          const cardParent = card.parentNode;
          cardParent.appendChild(card);
        });
        
        // Apply category and search filters
        bookmarkCards.forEach(card => {
          const categories = card.dataset.categories.toLowerCase().split(' ');
          const url = card.dataset.url.toLowerCase();
          const title = card.querySelector('a').textContent.toLowerCase();
          const description = card.querySelectorAll('td')[1]?.textContent.toLowerCase() || '';
          
          const matchesCategory = activeCategory === 'all' || categories.includes(activeCategory);
          const matchesSearch = searchQuery === '' || 
                                title.includes(searchQuery) || 
                                description.includes(searchQuery) || 
                                url.includes(searchQuery);
          
          if (matchesCategory && matchesSearch) {
            card.style.display = '';
            visibleCount++;
          } else {
            card.style.display = 'none';
          }
        });
        
        // Show/hide no results message
        if (visibleCount === 0) {
          noResultsElement.style.display = 'block';
          bookmarksContainer.style.display = 'none';
        } else {
          noResultsElement.style.display = 'none';
          bookmarksContainer.style.display = 'block';
        }
      }
      
      // Initialize with default filters
      applyFilters();
      
      // Set up visited links tracking
      const visitedLinks = new Set(JSON.parse(localStorage.getItem('visitedBookmarks') || '[]'));
      
      // Mark links that have been visited before
      document.querySelectorAll('.bookmark-link').forEach(link => {
        const url = link.getAttribute('data-url');
        if (visitedLinks.has(url)) {
          link.classList.add('previously-visited');
        }
        
        // Add click handler to track visited links
        link.addEventListener('click', () => {
          visitedLinks.add(url);
          link.classList.add('previously-visited');
          localStorage.setItem('visitedBookmarks', JSON.stringify([...visitedLinks]));
        });
      });
    });
  </script>
</Layout>
