---
import Layout from "@/components/astro/layout/Layout.astro";
import bookmarksData from "@/data/bookmarks.json";
import Logo from "@/components/astro/ui/Logo.astro";

const title = "Bookmarks â€” Waleed";
const description = "A collection of useful links and resources";

// Define types for bookmarks
interface BaseBookmark {
  id: string;
  name: string;
  url: string;
  category: string;
  description: string;
  timestamp?: string;
  date?: string;
  status?: string;
}

interface ProcessedBookmark extends BaseBookmark {
  processedCategories: string[];
  dateTimestamp: number;
  formattedDate: string;
  originalIndex?: number;
}

// Extract categories and create a Set for unique values
const allCategories = new Set<string>();
bookmarksData.bookmarks.forEach(bookmark => {
  const categories = bookmark.category.toLowerCase().split(',').map(cat => cat.trim());
  categories.forEach(category => {
    allCategories.add(category);
  });
});

// Sort categories alphabetically and ensure 'all' is first
const sortedCategories = ['all', ...Array.from(allCategories).sort()];

// Create a basic count of bookmarks per category
const categoryCounts = {} as Record<string, number>;
categoryCounts['all'] = bookmarksData.bookmarks.length;

sortedCategories.slice(1).forEach(category => {
  categoryCounts[category] = bookmarksData.bookmarks.filter(bookmark => 
    bookmark.category.toLowerCase().split(',').map(c => c.trim()).includes(category)
  ).length;
});

// Category colors - limited, minimal palette aligned with Bauhaus principles
const categoryColors: Record<string, { bg: string, text: string, special?: boolean }> = {
  "uncategorized": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "article": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "articles": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "tools": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "design": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "development": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "productivity": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "books": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "videos": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" },
  "ai": { bg: "bg-neutral-100 dark:bg-neutral-800", text: "text-neutral-700 dark:text-neutral-300" }
};

// Get color for a category, with fallback to uncategorized
function getCategoryColor(category: string) {
  const lowerCategory = category.toLowerCase();
  return categoryColors[lowerCategory] || categoryColors["uncategorized"];
}

// Format date function
function formatDate(dateString: string | undefined): string {
  if (!dateString) return "";
  
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return ""; // Invalid date
  
  return new Intl.DateTimeFormat('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  }).format(date);
}

// Convert string to date for sorting
function dateToTimestamp(dateString: string | undefined, timestampString: string | undefined): number {
  // First check if timestamp exists (most precise)
  if (timestampString) {
    const timestamp = new Date(timestampString);
    return isNaN(timestamp.getTime()) ? 0 : timestamp.getTime();
  }
  
  // Fall back to date if timestamp isn't available
  if (dateString) {
    const date = new Date(dateString);
    return isNaN(date.getTime()) ? 0 : date.getTime();
  }
  
  return 0; // No date means oldest
}

// Process bookmarks and add index
let processedBookmarks = bookmarksData.bookmarks.map((bookmark, index) => {
  // Process categories
  const processedCategories = bookmark.category.toLowerCase().split(',').map(cat => cat.trim());
  
  // Process dates for sorting and display
  const dateTimestamp = dateToTimestamp(bookmark.date, bookmark.timestamp);
  const date = new Date(dateTimestamp);
  
  // Format date for display
  let formattedDate = "No date";
  if (dateTimestamp > 0) {
    try {
      // Format as "March 13, 2016" or similar
      formattedDate = formatDate(date.toISOString());
    } catch (e) {
      console.error("Error formatting date:", e);
    }
  }
  
  return {
    ...bookmark,
    processedCategories,
    dateTimestamp,
    formattedDate,
    originalIndex: index
  };
});

// Initially sort by newest first (can be toggled by the user)
processedBookmarks.sort((a, b) => b.dateTimestamp - a.dateTimestamp);

// Initialize bookmark numbering with highest at top
processedBookmarks.forEach((bookmark, index) => {
  bookmark.id = String(processedBookmarks.length - index);
});

---

<Layout title={title} description={description}>
  <section class="space-y-4">
    <!-- Logo and title in one container -->
    <div class="container max-w-4xl mx-auto px-4 pt-6 pb-2 flex flex-col items-center justify-center">
      <div class="mb-4" transition:name="logo">
        <Logo class="w-16 h-[72px]" />
      </div>
      <h1 class="text-3xl font-medium text-gray-900 dark:text-white">Bookmarks</h1>
    </div>
    
    <!-- Filters and search -->
    <div class="w-full max-w-3xl mx-auto px-4" transition:animate="fade">
      <div class="flex justify-center items-center mb-6">
        <!-- Search input -->
        <div class="relative w-full max-w-md">
          <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 dark:text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <input 
            type="search" 
            id="search-input" 
            class="w-full bg-gray-50 dark:bg-neutral-800 border border-gray-200 dark:border-neutral-700 text-gray-900 dark:text-white text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block pl-10 p-2.5" 
            placeholder="Search bookmarks..." 
          />
        </div>
      </div>
      
      <!-- Filter groups -->
      <div class="flex flex-col gap-4 mb-8">
        <!-- Category filters -->
        <div class="filter-group">
          <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Categories</h3>
          <div class="flex flex-wrap gap-2 categories-container">
            {sortedCategories.map(category => (
              <button 
                class={`category-chip ${category === 'all' ? 'bg-gray-800 text-white dark:bg-white dark:text-gray-900' : 'bg-gray-100 text-gray-800 dark:bg-neutral-800 dark:text-gray-200'} px-3 py-1.5 text-xs border border-gray-200 dark:border-gray-700 hover:bg-gray-200 dark:hover:bg-neutral-700 transition-colors`} 
                data-category={category}
                type="button"
                onclick={`setCategory(this, '${category}')`}
              >
                {category === 'all' ? 'All' : category.toLowerCase()} <span class="opacity-60 ml-1">({categoryCounts[category]})</span>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
    
    <!-- Bookmarks feed -->
    <div id="bookmarks-container" class="w-full max-w-3xl mx-auto pb-8">
      <ul class="list-none pl-0 space-y-3">
        {processedBookmarks.map((bookmark, index) => (
          <li 
            class="bookmark-card group w-full relative border-b border-gray-200 dark:border-neutral-800 pb-3 transition-colors duration-200"
            data-categories={bookmark.processedCategories.join(' ')}
            data-url={bookmark.url}
            data-date={bookmark.dateTimestamp.toString()}
            transition:animate="fade"
          >
            <!-- Header with title and external link -->
            <div class="flex items-baseline justify-between mb-1">
              <div class="flex items-baseline gap-3 min-w-0 flex-1">
                <span class="font-mono text-sm text-gray-400 dark:text-gray-500 tabular-nums flex-shrink-0">
                  {bookmark.id.toString().padStart(2, '0')}
                </span>
                <a 
                  href={bookmark.url} 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  class="text-base font-medium text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors truncate"
                >
                  {bookmark.name}
                </a>
              </div>
              <div class="flex-shrink-0">
                <span class="text-xs text-gray-500 dark:text-gray-400">{bookmark.formattedDate}</span>
              </div>
            </div>
            
            <!-- Description only -->
            <p class="text-sm text-gray-600 dark:text-gray-400 ml-9 line-clamp-2">
              {bookmark.description || "No description available"}
            </p>
          </li>
        ))}
      </ul>
    </div>

    <!-- No results message -->
    <div id="no-results" class="hidden text-center py-8">
      <p class="text-gray-600 dark:text-gray-400">No bookmarks found matching your search.</p>
    </div>
  </section>
</Layout>

<style>
  /* Add styles for cassette tape track look */
  /* Removed table styles */
  
  /* Line clamp for descriptions */
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Tabular numbers for consistent alignment */
  .tabular-nums {
    font-variant-numeric: tabular-nums;
  }
  
  /* Visited bookmark styling */
  .bookmark-link:visited {
    color: #4b5563; /* text-gray-600 - darker than before */
    border-bottom: 2px solid #6366f1; /* indigo-500 - more visible underline */
    padding-bottom: 1px;
    position: relative;
  }
  
  .dark .bookmark-link:visited {
    color: #d1d5db; /* dark:text-gray-300 - brighter than before */
    border-bottom: 2px solid #818cf8; /* indigo-400 - more visible for dark mode */
    padding-bottom: 1px;
  }
  
  /* Add a vertical indicator to the left of the bookmark number */
  .bookmark-link:visited::before {
    content: "";
    position: absolute;
    left: -18px;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 16px;
    background-color: #6366f1; /* indigo-500 */
    border-radius: 2px;
  }
  
  .dark .bookmark-link:visited::before {
    background-color: #818cf8; /* indigo-400 */
  }
</style>

<script is:inline>
  // Global state
  let activeCategory = 'all';
  
  // Global filter functions
  function setCategory(element, category) {
    // Update active category
    activeCategory = category;
    
    // Reset all category chips
    document.querySelectorAll('.category-chip').forEach(chip => {
      chip.className = 'category-chip bg-gray-100 text-gray-800 dark:bg-neutral-800 dark:text-gray-200 px-3 py-1.5 text-xs border border-gray-200 dark:border-gray-700 hover:bg-gray-200 dark:hover:bg-neutral-700 transition-colors';
    });
    
    // Set active category chip
    element.className = 'category-chip bg-gray-800 text-white dark:bg-white dark:text-gray-900 px-3 py-1.5 text-xs border border-gray-200 dark:border-gray-700 hover:bg-gray-700 dark:hover:bg-gray-200 transition-colors';
    
    // Filter bookmarks
    filterBookmarks(category);
  }
  
  // Filter bookmarks
  function filterBookmarks(category) {
    const searchInput = document.getElementById('search-input');
    const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
    const bookmarkCards = document.querySelectorAll('.bookmark-card');
    
    bookmarkCards.forEach((card) => {
      const categories = card.dataset.categories?.toLowerCase().split(' ') || [];
      const url = card.dataset.url?.toLowerCase() || '';
      const titleElement = card.querySelector('a');
      const title = titleElement ? titleElement.textContent?.toLowerCase() || '' : '';
      const descriptionElement = card.querySelector('p');
      const description = descriptionElement ? descriptionElement.textContent?.toLowerCase() || '' : '';
      
      // Category filter
      const matchesCategory = category === 'all' || categories.includes(category);
      
      // Search filter
      const matchesSearch = !searchTerm || 
                           title.includes(searchTerm) || 
                           description.includes(searchTerm) || 
                           url.includes(searchTerm);
      
      if (matchesCategory && matchesSearch) {
        card.style.display = '';
      } else {
        card.style.display = 'none';
      }
    });
    
    // Update bookmark numbers
    updateBookmarkNumbers();
  }
  
  // Update bookmark numbers after filtering and sorting
  function updateBookmarkNumbers() {
    const bookmarkCards = document.querySelectorAll('.bookmark-card');
    const visibleCards = Array.from(bookmarkCards).filter(card => card.style.display !== 'none');
    const totalVisible = visibleCards.length;
    
    visibleCards.forEach((card, index) => {
      const numberElement = card.querySelector('.font-mono.text-sm.tabular-nums');
      if (numberElement) {
        // Display higher numbers at the top, starting with the total count
        const displayNumber = totalVisible - index;
        numberElement.textContent = displayNumber.toString().padStart(2, '0');
      }
    });
  }
  
  // Initialize on load
  document.addEventListener('DOMContentLoaded', () => {
    console.log("Bookmark script initialized");
    
    // Initialize search input
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
      searchInput.addEventListener('input', () => filterBookmarks(activeCategory));
    }
  });
</script>
